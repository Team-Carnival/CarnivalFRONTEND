{
  "version": 3,
  "sources": ["../../tsparticles-particles.js/esm/marcbruederlin/Particles.js", "../../tsparticles-particles.js/esm/VincentGarreau/particles.js", "../../tsparticles-particles.js/esm/index.js", "../../tsparticles-move-base/esm/Utils.js", "../../tsparticles-move-base/esm/BaseMover.js", "../../tsparticles-move-base/esm/index.js", "../../tsparticles-shape-circle/esm/CircleDrawer.js", "../../tsparticles-shape-circle/esm/index.js", "../../tsparticles-updater-color/esm/Utils.js", "../../tsparticles-updater-color/esm/ColorUpdater.js", "../../tsparticles-updater-color/esm/index.js", "../../tsparticles-updater-opacity/esm/Utils.js", "../../tsparticles-updater-opacity/esm/OpacityUpdater.js", "../../tsparticles-updater-opacity/esm/index.js", "../../tsparticles-updater-out-modes/esm/Utils.js", "../../tsparticles-updater-out-modes/esm/BounceOutMode.js", "../../tsparticles-updater-out-modes/esm/DestroyOutMode.js", "../../tsparticles-updater-out-modes/esm/NoneOutMode.js", "../../tsparticles-updater-out-modes/esm/OutOutMode.js", "../../tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js", "../../tsparticles-updater-out-modes/esm/index.js", "../../tsparticles-updater-size/esm/Utils.js", "../../tsparticles-updater-size/esm/SizeUpdater.js", "../../tsparticles-updater-size/esm/index.js", "../../tsparticles-basic/esm/index.js", "../../tsparticles-plugin-easing-quad/esm/index.js", "../../tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js", "../../tsparticles-interaction-external-attract/esm/Attractor.js", "../../tsparticles-interaction-external-attract/esm/index.js", "../../tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js", "../../tsparticles-interaction-external-bounce/esm/Bouncer.js", "../../tsparticles-interaction-external-bounce/esm/index.js", "../../tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js", "../../tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js", "../../tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js", "../../tsparticles-interaction-external-bubble/esm/Utils.js", "../../tsparticles-interaction-external-bubble/esm/Bubbler.js", "../../tsparticles-interaction-external-bubble/esm/index.js", "../../tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js", "../../tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js", "../../tsparticles-interaction-external-connect/esm/Utils.js", "../../tsparticles-interaction-external-connect/esm/Connector.js", "../../tsparticles-interaction-external-connect/esm/index.js", "../../tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js", "../../tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js", "../../tsparticles-interaction-external-grab/esm/Utils.js", "../../tsparticles-interaction-external-grab/esm/Grabber.js", "../../tsparticles-interaction-external-grab/esm/index.js", "../../tsparticles-interaction-external-pause/esm/Pauser.js", "../../tsparticles-interaction-external-pause/esm/index.js", "../../tsparticles-interaction-external-push/esm/Options/Classes/Push.js", "../../tsparticles-interaction-external-push/esm/Pusher.js", "../../tsparticles-interaction-external-push/esm/index.js", "../../tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js", "../../tsparticles-interaction-external-remove/esm/Remover.js", "../../tsparticles-interaction-external-remove/esm/index.js", "../../tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js", "../../tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js", "../../tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js", "../../tsparticles-interaction-external-repulse/esm/Repulser.js", "../../tsparticles-interaction-external-repulse/esm/index.js", "../../tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js", "../../tsparticles-interaction-external-slow/esm/Slower.js", "../../tsparticles-interaction-external-slow/esm/index.js", "../../tsparticles-shape-image/esm/GifUtils/Constants.js", "../../tsparticles-shape-image/esm/GifUtils/ByteStream.js", "../../tsparticles-shape-image/esm/GifUtils/Utils.js", "../../tsparticles-shape-image/esm/Utils.js", "../../tsparticles-shape-image/esm/ImageDrawer.js", "../../tsparticles-shape-image/esm/Options/Classes/Preload.js", "../../tsparticles-shape-image/esm/ImagePreloader.js", "../../tsparticles-shape-image/esm/index.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDelay.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDuration.js", "../../tsparticles-updater-life/esm/Options/Classes/Life.js", "../../tsparticles-updater-life/esm/LifeUpdater.js", "../../tsparticles-updater-life/esm/index.js", "../../tsparticles-shape-line/esm/LineDrawer.js", "../../tsparticles-shape-line/esm/index.js", "../../tsparticles-move-parallax/esm/ParallaxMover.js", "../../tsparticles-move-parallax/esm/index.js", "../../tsparticles-interaction-particles-attract/esm/Attractor.js", "../../tsparticles-interaction-particles-attract/esm/index.js", "../../tsparticles-interaction-particles-collisions/esm/Absorb.js", "../../tsparticles-interaction-particles-collisions/esm/Bounce.js", "../../tsparticles-interaction-particles-collisions/esm/Destroy.js", "../../tsparticles-interaction-particles-collisions/esm/ResolveCollision.js", "../../tsparticles-interaction-particles-collisions/esm/Collider.js", "../../tsparticles-interaction-particles-collisions/esm/index.js", "../../tsparticles-interaction-particles-links/esm/CircleWarp.js", "../../tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js", "../../tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js", "../../tsparticles-interaction-particles-links/esm/Options/Classes/Links.js", "../../tsparticles-interaction-particles-links/esm/Linker.js", "../../tsparticles-interaction-particles-links/esm/interaction.js", "../../tsparticles-interaction-particles-links/esm/Utils.js", "../../tsparticles-interaction-particles-links/esm/LinkInstance.js", "../../tsparticles-interaction-particles-links/esm/plugin.js", "../../tsparticles-interaction-particles-links/esm/index.js", "../../tsparticles-shape-polygon/esm/PolygonDrawerBase.js", "../../tsparticles-shape-polygon/esm/PolygonDrawer.js", "../../tsparticles-shape-polygon/esm/TriangleDrawer.js", "../../tsparticles-shape-polygon/esm/index.js", "../../tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js", "../../tsparticles-updater-rotate/esm/Options/Classes/Rotate.js", "../../tsparticles-updater-rotate/esm/RotateUpdater.js", "../../tsparticles-updater-rotate/esm/index.js", "../../tsparticles-shape-square/esm/SquareDrawer.js", "../../tsparticles-shape-square/esm/index.js", "../../tsparticles-shape-star/esm/StarDrawer.js", "../../tsparticles-shape-star/esm/index.js", "../../tsparticles-updater-stroke-color/esm/Utils.js", "../../tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js", "../../tsparticles-updater-stroke-color/esm/index.js", "../../tsparticles-shape-text/esm/TextDrawer.js", "../../tsparticles-shape-text/esm/index.js", "../../tsparticles-slim/esm/index.js"],
  "sourcesContent": ["import { tsParticles } from \"tsparticles-engine\";\r\nexport class Particles {\r\n    static init(options) {\r\n        const particles = new Particles(), selector = options.selector;\r\n        if (!selector) {\r\n            throw new Error(\"No selector provided\");\r\n        }\r\n        const el = document.querySelector(selector);\r\n        if (!el) {\r\n            throw new Error(\"No element found for selector\");\r\n        }\r\n        tsParticles\r\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\r\n            fullScreen: {\r\n                enable: false,\r\n            },\r\n            particles: {\r\n                color: {\r\n                    value: options.color ?? \"!000000\",\r\n                },\r\n                links: {\r\n                    color: \"random\",\r\n                    distance: options.minDistance ?? 120,\r\n                    enable: options.connectParticles ?? false,\r\n                },\r\n                move: {\r\n                    enable: true,\r\n                    speed: options.speed ?? 0.5,\r\n                },\r\n                number: {\r\n                    value: options.maxParticles ?? 100,\r\n                },\r\n                size: {\r\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\r\n                },\r\n            },\r\n            responsive: options.responsive?.map((responsive) => ({\r\n                maxWidth: responsive.breakpoint,\r\n                options: {\r\n                    particles: {\r\n                        color: {\r\n                            value: responsive.options?.color,\r\n                        },\r\n                        links: {\r\n                            distance: responsive.options?.minDistance,\r\n                            enable: responsive.options?.connectParticles,\r\n                        },\r\n                        number: {\r\n                            value: options.maxParticles,\r\n                        },\r\n                        move: {\r\n                            enable: true,\r\n                            speed: responsive.options?.speed,\r\n                        },\r\n                        size: {\r\n                            value: responsive.options?.sizeVariations,\r\n                        },\r\n                    },\r\n                },\r\n            })),\r\n        })\r\n            .then((container) => {\r\n            particles._container = container;\r\n        });\r\n        return particles;\r\n    }\r\n    destroy() {\r\n        const container = this._container;\r\n        container && container.destroy();\r\n    }\r\n    pauseAnimation() {\r\n        const container = this._container;\r\n        container && container.pause();\r\n    }\r\n    resumeAnimation() {\r\n        const container = this._container;\r\n        container && container.play();\r\n    }\r\n}\r\n", "const initParticlesJS = (engine) => {\r\n    const particlesJS = (tagId, options) => {\r\n        return engine.load(tagId, options);\r\n    };\r\n    particlesJS.load = (tagId, pathConfigJson, callback) => {\r\n        engine\r\n            .loadJSON(tagId, pathConfigJson)\r\n            .then((container) => {\r\n            if (container) {\r\n                callback(container);\r\n            }\r\n        })\r\n            .catch(() => {\r\n            callback(undefined);\r\n        });\r\n    };\r\n    particlesJS.setOnClickHandler = (callback) => {\r\n        engine.setOnClickHandler(callback);\r\n    };\r\n    const pJSDom = engine.dom();\r\n    return { particlesJS, pJSDom };\r\n};\r\nexport { initParticlesJS };\r\n", "import { Particles } from \"./marcbruederlin/Particles\";\r\nimport { initParticlesJS } from \"./VincentGarreau/particles\";\r\nconst initPjs = (engine) => {\r\n    const { particlesJS, pJSDom } = initParticlesJS(engine);\r\n    window.particlesJS = particlesJS;\r\n    window.pJSDom = pJSDom;\r\n    window.Particles = Particles;\r\n    return { particlesJS, pJSDom, Particles };\r\n};\r\nexport { initPjs };\r\n", "import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\r\nexport function applyDistance(particle) {\r\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\r\n    if (!hDistance && !vDistance) {\r\n        return;\r\n    }\r\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\r\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\r\n        if (hDistance) {\r\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\r\n        }\r\n        if (vDistance) {\r\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\r\n        }\r\n    }\r\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\r\n        particle.misplaced = false;\r\n    }\r\n    else if (particle.misplaced) {\r\n        const pos = particle.position, vel = particle.velocity;\r\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\r\n            vel.x *= -getRandom();\r\n        }\r\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\r\n            vel.y *= -getRandom();\r\n        }\r\n    }\r\n}\r\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\r\n    applyPath(particle, delta);\r\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\r\n    if (moveDrift && moveSpeed) {\r\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\r\n    }\r\n    if (gravityOptions?.enable && moveSpeed) {\r\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\r\n    }\r\n    const decay = particle.moveDecay;\r\n    particle.velocity.multTo(decay);\r\n    const velocity = particle.velocity.mult(moveSpeed);\r\n    if (gravityOptions?.enable &&\r\n        maxSpeed > 0 &&\r\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\r\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\r\n        velocity.y = gravityFactor * maxSpeed;\r\n        if (moveSpeed) {\r\n            particle.velocity.y = velocity.y / moveSpeed;\r\n        }\r\n    }\r\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\r\n    velocity.multTo(zVelocityFactor);\r\n    const { position } = particle;\r\n    position.addTo(velocity);\r\n    if (moveOptions.vibrate) {\r\n        position.x += Math.sin(position.x * Math.cos(position.y));\r\n        position.y += Math.cos(position.y * Math.sin(position.x));\r\n    }\r\n}\r\nexport function spin(particle, moveSpeed) {\r\n    const container = particle.container;\r\n    if (!particle.spin) {\r\n        return;\r\n    }\r\n    const updateFunc = {\r\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\r\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\r\n    };\r\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\r\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\r\n    particle.spin.radius += particle.spin.acceleration;\r\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\r\n    if (particle.spin.radius > maxCanvasSize / 2) {\r\n        particle.spin.radius = maxCanvasSize / 2;\r\n        particle.spin.acceleration *= -1;\r\n    }\r\n    else if (particle.spin.radius < 0) {\r\n        particle.spin.radius = 0;\r\n        particle.spin.acceleration *= -1;\r\n    }\r\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\r\n}\r\nexport function applyPath(particle, delta) {\r\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\r\n    if (!pathEnabled) {\r\n        return;\r\n    }\r\n    if (particle.lastPathTime <= particle.pathDelay) {\r\n        particle.lastPathTime += delta.value;\r\n        return;\r\n    }\r\n    const path = particle.pathGenerator?.generate(particle, delta);\r\n    if (path) {\r\n        particle.velocity.addTo(path);\r\n    }\r\n    if (pathOptions.clamp) {\r\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\r\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\r\n    }\r\n    particle.lastPathTime -= particle.pathDelay;\r\n}\r\nexport function getProximitySpeedFactor(particle) {\r\n    return particle.slow.inRange ? particle.slow.factor : 1;\r\n}\r\n", "import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\r\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\r\nconst diffFactor = 2;\r\nexport class BaseMover {\r\n    constructor() {\r\n        this._initSpin = (particle) => {\r\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\r\n            if (!spinOptions.enable) {\r\n                return;\r\n            }\r\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\r\n                x: (spinPos.x / 100) * container.canvas.size.width,\r\n                y: (spinPos.y / 100) * container.canvas.size.height,\r\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\r\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\r\n            particle.spin = {\r\n                center: spinCenter,\r\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\r\n                angle: particle.velocity.angle,\r\n                radius: distance,\r\n                acceleration: particle.retina.spinAcceleration,\r\n            };\r\n        };\r\n    }\r\n    init(particle) {\r\n        const options = particle.options, gravityOptions = options.move.gravity;\r\n        particle.gravity = {\r\n            enable: gravityOptions.enable,\r\n            acceleration: getRangeValue(gravityOptions.acceleration),\r\n            inverse: gravityOptions.inverse,\r\n        };\r\n        this._initSpin(particle);\r\n    }\r\n    isEnabled(particle) {\r\n        return !particle.destroyed && particle.options.move.enable;\r\n    }\r\n    move(particle, delta) {\r\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\r\n        if (!moveOptions.enable) {\r\n            return;\r\n        }\r\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\r\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\r\n        if (moveOptions.spin.enable) {\r\n            spin(particle, moveSpeed);\r\n        }\r\n        else {\r\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\r\n        }\r\n        applyDistance(particle);\r\n    }\r\n}\r\n", "import { BaseMover } from \"./BaseMover\";\r\nexport async function loadBaseMover(engine, refresh = true) {\r\n    await engine.addMover(\"base\", () => new BaseMover(), refresh);\r\n}\r\n", "import { isObject } from \"tsparticles-engine\";\r\nexport class CircleDrawer {\r\n    draw(context, particle, radius) {\r\n        if (!particle.circleRange) {\r\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\r\n        }\r\n        const circleRange = particle.circleRange;\r\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\r\n    }\r\n    getSidesCount() {\r\n        return 12;\r\n    }\r\n    particleInit(container, particle) {\r\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\r\n            max: 360,\r\n            min: 0,\r\n        };\r\n        particle.circleRange = !isObject(angle)\r\n            ? {\r\n                min: 0,\r\n                max: (angle * Math.PI) / 180,\r\n            }\r\n            : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\r\n    }\r\n}\r\n", "import { CircleDrawer } from \"./CircleDrawer\";\r\nexport async function loadCircleShape(engine, refresh = true) {\r\n    await engine.addShape(\"circle\", new CircleDrawer(), refresh);\r\n}\r\n", "import { randomInRange, } from \"tsparticles-engine\";\r\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\r\n    if (!colorValue ||\r\n        !valueAnimation.enable ||\r\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\r\n        return;\r\n    }\r\n    if (!colorValue.time) {\r\n        colorValue.time = 0;\r\n    }\r\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\r\n        colorValue.time += delta.value;\r\n    }\r\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\r\n        return;\r\n    }\r\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\r\n    if (!decrease || colorValue.status === \"increasing\") {\r\n        colorValue.value += velocity;\r\n        if (colorValue.value > max) {\r\n            if (!colorValue.loops) {\r\n                colorValue.loops = 0;\r\n            }\r\n            colorValue.loops++;\r\n            if (decrease) {\r\n                colorValue.status = \"decreasing\";\r\n                colorValue.value -= colorValue.value % max;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        colorValue.value -= velocity;\r\n        if (colorValue.value < 0) {\r\n            if (!colorValue.loops) {\r\n                colorValue.loops = 0;\r\n            }\r\n            colorValue.loops++;\r\n            colorValue.status = \"increasing\";\r\n            colorValue.value += colorValue.value;\r\n        }\r\n    }\r\n    if (colorValue.velocity && decay !== 1) {\r\n        colorValue.velocity *= decay;\r\n    }\r\n    if (colorValue.value > max) {\r\n        colorValue.value %= max;\r\n    }\r\n}\r\nexport function updateColor(particle, delta) {\r\n    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\r\n    if (!color) {\r\n        return;\r\n    }\r\n    const { h, s, l } = color;\r\n    if (h) {\r\n        updateColorValue(delta, h, hAnimation, 360, false);\r\n    }\r\n    if (s) {\r\n        updateColorValue(delta, s, sAnimation, 100, true);\r\n    }\r\n    if (l) {\r\n        updateColorValue(delta, l, lAnimation, 100, true);\r\n    }\r\n}\r\n", "import { getHslAnimationFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\r\nimport { updateColor } from \"./Utils\";\r\nexport class ColorUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\r\n        if (hslColor) {\r\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\r\n        return (!particle.destroyed &&\r\n            !particle.spawning &&\r\n            ((color?.h.value !== undefined && hAnimation.enable) ||\r\n                (color?.s.value !== undefined && sAnimation.enable) ||\r\n                (color?.l.value !== undefined && lAnimation.enable)));\r\n    }\r\n    update(particle, delta) {\r\n        updateColor(particle, delta);\r\n    }\r\n}\r\n", "import { ColorUpdater } from \"./ColorUpdater\";\r\nexport async function loadColorUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"color\", (container) => new ColorUpdater(container), refresh);\r\n}\r\n", "import { clamp } from \"tsparticles-engine\";\r\nfunction checkDestroy(particle, value, minValue, maxValue) {\r\n    switch (particle.options.opacity.animation.destroy) {\r\n        case \"max\":\r\n            if (value >= maxValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n        case \"min\":\r\n            if (value <= minValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n    }\r\n}\r\nexport function updateOpacity(particle, delta) {\r\n    const data = particle.opacity;\r\n    if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\r\n        return;\r\n    }\r\n    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\r\n    if (!data.time) {\r\n        data.time = 0;\r\n    }\r\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\r\n        data.time += delta.value;\r\n    }\r\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\r\n        return;\r\n    }\r\n    switch (data.status) {\r\n        case \"increasing\":\r\n            if (data.value >= maxValue) {\r\n                data.status = \"decreasing\";\r\n                if (!data.loops) {\r\n                    data.loops = 0;\r\n                }\r\n                data.loops++;\r\n            }\r\n            else {\r\n                data.value += (data.velocity ?? 0) * delta.factor;\r\n            }\r\n            break;\r\n        case \"decreasing\":\r\n            if (data.value <= minValue) {\r\n                data.status = \"increasing\";\r\n                if (!data.loops) {\r\n                    data.loops = 0;\r\n                }\r\n                data.loops++;\r\n            }\r\n            else {\r\n                data.value -= (data.velocity ?? 0) * delta.factor;\r\n            }\r\n            break;\r\n    }\r\n    if (data.velocity && data.decay !== 1) {\r\n        data.velocity *= decay;\r\n    }\r\n    checkDestroy(particle, data.value, minValue, maxValue);\r\n    if (!particle.destroyed) {\r\n        data.value = clamp(data.value, minValue, maxValue);\r\n    }\r\n}\r\n", "import { getRandom, getRangeValue, initParticleNumericAnimationValue, } from \"tsparticles-engine\";\r\nimport { updateOpacity } from \"./Utils\";\r\nexport class OpacityUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const opacityOptions = particle.options.opacity;\r\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\r\n        const opacityAnimation = opacityOptions.animation;\r\n        if (opacityAnimation.enable) {\r\n            particle.opacity.velocity =\r\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\r\n            if (!opacityAnimation.sync) {\r\n                particle.opacity.velocity *= getRandom();\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return (!particle.destroyed &&\r\n            !particle.spawning &&\r\n            !!particle.opacity &&\r\n            particle.opacity.enable &&\r\n            ((particle.opacity.maxLoops ?? 0) <= 0 ||\r\n                ((particle.opacity.maxLoops ?? 0) > 0 &&\r\n                    (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0))));\r\n    }\r\n    reset(particle) {\r\n        if (particle.opacity) {\r\n            particle.opacity.time = 0;\r\n            particle.opacity.loops = 0;\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateOpacity(particle, delta);\r\n    }\r\n}\r\n", "import { OpacityUpdater } from \"./OpacityUpdater\";\r\nexport async function loadOpacityUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"opacity\", (container) => new OpacityUpdater(container), refresh);\r\n}\r\n", "import { getValue } from \"tsparticles-engine\";\r\nexport function bounceHorizontal(data) {\r\n    if ((data.outMode !== \"bounce\" &&\r\n        data.outMode !== \"bounce-horizontal\" &&\r\n        data.outMode !== \"bounceHorizontal\" &&\r\n        data.outMode !== \"split\") ||\r\n        (data.direction !== \"left\" && data.direction !== \"right\")) {\r\n        return;\r\n    }\r\n    if (data.bounds.right < 0 && data.direction === \"left\") {\r\n        data.particle.position.x = data.size + data.offset.x;\r\n    }\r\n    else if (data.bounds.left > data.canvasSize.width && data.direction === \"right\") {\r\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\r\n    }\r\n    const velocity = data.particle.velocity.x;\r\n    let bounced = false;\r\n    if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\r\n        (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\r\n        const newVelocity = getValue(data.particle.options.bounce.horizontal);\r\n        data.particle.velocity.x *= -newVelocity;\r\n        bounced = true;\r\n    }\r\n    if (!bounced) {\r\n        return;\r\n    }\r\n    const minPos = data.offset.x + data.size;\r\n    if (data.bounds.right >= data.canvasSize.width && data.direction === \"right\") {\r\n        data.particle.position.x = data.canvasSize.width - minPos;\r\n    }\r\n    else if (data.bounds.left <= 0 && data.direction === \"left\") {\r\n        data.particle.position.x = minPos;\r\n    }\r\n    if (data.outMode === \"split\") {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nexport function bounceVertical(data) {\r\n    if ((data.outMode !== \"bounce\" &&\r\n        data.outMode !== \"bounce-vertical\" &&\r\n        data.outMode !== \"bounceVertical\" &&\r\n        data.outMode !== \"split\") ||\r\n        (data.direction !== \"bottom\" && data.direction !== \"top\")) {\r\n        return;\r\n    }\r\n    if (data.bounds.bottom < 0 && data.direction === \"top\") {\r\n        data.particle.position.y = data.size + data.offset.y;\r\n    }\r\n    else if (data.bounds.top > data.canvasSize.height && data.direction === \"bottom\") {\r\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\r\n    }\r\n    const velocity = data.particle.velocity.y;\r\n    let bounced = false;\r\n    if ((data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0) ||\r\n        (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\r\n        const newVelocity = getValue(data.particle.options.bounce.vertical);\r\n        data.particle.velocity.y *= -newVelocity;\r\n        bounced = true;\r\n    }\r\n    if (!bounced) {\r\n        return;\r\n    }\r\n    const minPos = data.offset.y + data.size;\r\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === \"bottom\") {\r\n        data.particle.position.y = data.canvasSize.height - minPos;\r\n    }\r\n    else if (data.bounds.top <= 0 && data.direction === \"top\") {\r\n        data.particle.position.y = minPos;\r\n    }\r\n    if (data.outMode === \"split\") {\r\n        data.particle.destroy();\r\n    }\r\n}\r\n", "import { calculateBounds, } from \"tsparticles-engine\";\r\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\r\nexport class BounceOutMode {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.modes = [\r\n            \"bounce\",\r\n            \"bounce-vertical\",\r\n            \"bounce-horizontal\",\r\n            \"bounceVertical\",\r\n            \"bounceHorizontal\",\r\n            \"split\",\r\n        ];\r\n    }\r\n    update(particle, direction, delta, outMode) {\r\n        if (!this.modes.includes(outMode)) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particleBounce !== undefined) {\r\n                handled = plugin.particleBounce(particle, delta, direction);\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        if (handled) {\r\n            return;\r\n        }\r\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\r\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n    }\r\n}\r\n", "import { Vector, getDistances, isPointInside, } from \"tsparticles-engine\";\r\nexport class DestroyOutMode {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.modes = [\"destroy\"];\r\n    }\r\n    update(particle, direction, _delta, outMode) {\r\n        if (!this.modes.includes(outMode)) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        switch (particle.outType) {\r\n            case \"normal\":\r\n            case \"outside\":\r\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\r\n                    return;\r\n                }\r\n                break;\r\n            case \"inside\": {\r\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter);\r\n                const { x: vx, y: vy } = particle.velocity;\r\n                if ((vx < 0 && dx > particle.moveCenter.radius) ||\r\n                    (vy < 0 && dy > particle.moveCenter.radius) ||\r\n                    (vx >= 0 && dx < -particle.moveCenter.radius) ||\r\n                    (vy >= 0 && dy < -particle.moveCenter.radius)) {\r\n                    return;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        container.particles.remove(particle, undefined, true);\r\n    }\r\n}\r\n", "import { Vector, isPointInside, } from \"tsparticles-engine\";\r\nexport class NoneOutMode {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.modes = [\"none\"];\r\n    }\r\n    update(particle, direction, delta, outMode) {\r\n        if (!this.modes.includes(outMode)) {\r\n            return;\r\n        }\r\n        if ((particle.options.move.distance.horizontal &&\r\n            (direction === \"left\" || direction === \"right\")) ||\r\n            (particle.options.move.distance.vertical &&\r\n                (direction === \"top\" || direction === \"bottom\"))) {\r\n            return;\r\n        }\r\n        const gravityOptions = particle.options.move.gravity, container = this.container;\r\n        const canvasSize = container.canvas.size;\r\n        const pRadius = particle.getRadius();\r\n        if (!gravityOptions.enable) {\r\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\r\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\r\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\r\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\r\n                return;\r\n            }\r\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n        else {\r\n            const position = particle.position;\r\n            if ((!gravityOptions.inverse &&\r\n                position.y > canvasSize.height + pRadius &&\r\n                direction === \"bottom\") ||\r\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\r\nexport class OutOutMode {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.modes = [\"out\"];\r\n    }\r\n    update(particle, direction, delta, outMode) {\r\n        if (!this.modes.includes(outMode)) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        switch (particle.outType) {\r\n            case \"inside\": {\r\n                const { x: vx, y: vy } = particle.velocity;\r\n                const circVec = Vector.origin;\r\n                circVec.length = particle.moveCenter.radius;\r\n                circVec.angle = particle.velocity.angle + Math.PI;\r\n                circVec.addTo(Vector.create(particle.moveCenter));\r\n                const { dx, dy } = getDistances(particle.position, circVec);\r\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\r\n                    return;\r\n                }\r\n                particle.position.x = Math.floor(randomInRange({\r\n                    min: 0,\r\n                    max: container.canvas.size.width,\r\n                }));\r\n                particle.position.y = Math.floor(randomInRange({\r\n                    min: 0,\r\n                    max: container.canvas.size.height,\r\n                }));\r\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\r\n                particle.direction = Math.atan2(-newDy, -newDx);\r\n                particle.velocity.angle = particle.direction;\r\n                break;\r\n            }\r\n            default: {\r\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\r\n                    return;\r\n                }\r\n                switch (particle.outType) {\r\n                    case \"outside\": {\r\n                        particle.position.x =\r\n                            Math.floor(randomInRange({\r\n                                min: -particle.moveCenter.radius,\r\n                                max: particle.moveCenter.radius,\r\n                            })) + particle.moveCenter.x;\r\n                        particle.position.y =\r\n                            Math.floor(randomInRange({\r\n                                min: -particle.moveCenter.radius,\r\n                                max: particle.moveCenter.radius,\r\n                            })) + particle.moveCenter.y;\r\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\r\n                        if (particle.moveCenter.radius) {\r\n                            particle.direction = Math.atan2(dy, dx);\r\n                            particle.velocity.angle = particle.direction;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"normal\": {\r\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\r\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\r\n                            left: -particle.getRadius() - particle.offset.x,\r\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\r\n                            top: -particle.getRadius() - particle.offset.y,\r\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\r\n                        if (direction === \"right\" &&\r\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\r\n                            particle.position.x = newPos.left;\r\n                            particle.initialPosition.x = particle.position.x;\r\n                            if (!wrap) {\r\n                                particle.position.y = getRandom() * canvasSize.height;\r\n                                particle.initialPosition.y = particle.position.y;\r\n                            }\r\n                        }\r\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\r\n                            particle.position.x = newPos.right;\r\n                            particle.initialPosition.x = particle.position.x;\r\n                            if (!wrap) {\r\n                                particle.position.y = getRandom() * canvasSize.height;\r\n                                particle.initialPosition.y = particle.position.y;\r\n                            }\r\n                        }\r\n                        if (direction === \"bottom\" &&\r\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\r\n                            if (!wrap) {\r\n                                particle.position.x = getRandom() * canvasSize.width;\r\n                                particle.initialPosition.x = particle.position.x;\r\n                            }\r\n                            particle.position.y = newPos.top;\r\n                            particle.initialPosition.y = particle.position.y;\r\n                        }\r\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\r\n                            if (!wrap) {\r\n                                particle.position.x = getRandom() * canvasSize.width;\r\n                                particle.initialPosition.x = particle.position.x;\r\n                            }\r\n                            particle.position.y = newPos.bottom;\r\n                            particle.initialPosition.y = particle.position.y;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { BounceOutMode } from \"./BounceOutMode\";\r\nimport { DestroyOutMode } from \"./DestroyOutMode\";\r\nimport { NoneOutMode } from \"./NoneOutMode\";\r\nimport { OutOutMode } from \"./OutOutMode\";\r\nexport class OutOfCanvasUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this._updateOutMode = (particle, delta, outMode, direction) => {\r\n            for (const updater of this.updaters) {\r\n                updater.update(particle, direction, delta, outMode);\r\n            }\r\n        };\r\n        this.updaters = [\r\n            new BounceOutMode(container),\r\n            new DestroyOutMode(container),\r\n            new OutOutMode(container),\r\n            new NoneOutMode(container),\r\n        ];\r\n    }\r\n    init() {\r\n    }\r\n    isEnabled(particle) {\r\n        return !particle.destroyed && !particle.spawning;\r\n    }\r\n    update(particle, delta) {\r\n        const outModes = particle.options.move.outModes;\r\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, \"bottom\");\r\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, \"left\");\r\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, \"right\");\r\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, \"top\");\r\n    }\r\n}\r\n", "import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater\";\r\nexport async function loadOutModesUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"outModes\", (container) => new OutOfCanvasUpdater(container), refresh);\r\n}\r\n", "import { clamp } from \"tsparticles-engine\";\r\nfunction checkDestroy(particle, value, minValue, maxValue) {\r\n    switch (particle.options.size.animation.destroy) {\r\n        case \"max\":\r\n            if (value >= maxValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n        case \"min\":\r\n            if (value <= minValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n    }\r\n}\r\nexport function updateSize(particle, delta) {\r\n    const data = particle.size;\r\n    if (particle.destroyed ||\r\n        !data ||\r\n        !data.enable ||\r\n        ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\r\n        return;\r\n    }\r\n    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\r\n    if (!data.time) {\r\n        data.time = 0;\r\n    }\r\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\r\n        data.time += delta.value;\r\n    }\r\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\r\n        return;\r\n    }\r\n    switch (data.status) {\r\n        case \"increasing\":\r\n            if (data.value >= maxValue) {\r\n                data.status = \"decreasing\";\r\n                if (!data.loops) {\r\n                    data.loops = 0;\r\n                }\r\n                data.loops++;\r\n            }\r\n            else {\r\n                data.value += sizeVelocity;\r\n            }\r\n            break;\r\n        case \"decreasing\":\r\n            if (data.value <= minValue) {\r\n                data.status = \"increasing\";\r\n                if (!data.loops) {\r\n                    data.loops = 0;\r\n                }\r\n                data.loops++;\r\n            }\r\n            else {\r\n                data.value -= sizeVelocity;\r\n            }\r\n    }\r\n    if (data.velocity && decay !== 1) {\r\n        data.velocity *= decay;\r\n    }\r\n    checkDestroy(particle, data.value, minValue, maxValue);\r\n    if (!particle.destroyed) {\r\n        data.value = clamp(data.value, minValue, maxValue);\r\n    }\r\n}\r\n", "import { getRandom } from \"tsparticles-engine\";\r\nimport { updateSize } from \"./Utils\";\r\nexport class SizeUpdater {\r\n    init(particle) {\r\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\r\n        if (sizeAnimation.enable) {\r\n            particle.size.velocity =\r\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100) *\r\n                    container.retina.reduceFactor;\r\n            if (!sizeAnimation.sync) {\r\n                particle.size.velocity *= getRandom();\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return (!particle.destroyed &&\r\n            !particle.spawning &&\r\n            particle.size.enable &&\r\n            ((particle.size.maxLoops ?? 0) <= 0 ||\r\n                ((particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0))));\r\n    }\r\n    reset(particle) {\r\n        particle.size.loops = 0;\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateSize(particle, delta);\r\n    }\r\n}\r\n", "import { SizeUpdater } from \"./SizeUpdater\";\r\nexport async function loadSizeUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"size\", () => new SizeUpdater(), refresh);\r\n}\r\n", "import { loadBaseMover } from \"tsparticles-move-base\";\r\nimport { loadCircleShape } from \"tsparticles-shape-circle\";\r\nimport { loadColorUpdater } from \"tsparticles-updater-color\";\r\nimport { loadOpacityUpdater } from \"tsparticles-updater-opacity\";\r\nimport { loadOutModesUpdater } from \"tsparticles-updater-out-modes\";\r\nimport { loadSizeUpdater } from \"tsparticles-updater-size\";\r\nexport async function loadBasic(engine, refresh = true) {\r\n    await loadBaseMover(engine, false);\r\n    await loadCircleShape(engine, false);\r\n    await loadColorUpdater(engine, false);\r\n    await loadOpacityUpdater(engine, false);\r\n    await loadOutModesUpdater(engine, false);\r\n    await loadSizeUpdater(engine, false);\r\n    await engine.refresh(refresh);\r\n}\r\n", "import { addEasing } from \"tsparticles-engine\";\r\nexport async function loadEasingQuadPlugin() {\r\n    addEasing(\"ease-in-quad\", (value) => value ** 2);\r\n    addEasing(\"ease-out-quad\", (value) => 1 - (1 - value) ** 2);\r\n    addEasing(\"ease-in-out-quad\", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\r\n}\r\n", "export class Attract {\r\n    constructor() {\r\n        this.distance = 200;\r\n        this.duration = 0.4;\r\n        this.easing = \"ease-out-quad\";\r\n        this.factor = 1;\r\n        this.maxSpeed = 50;\r\n        this.speed = 1;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        if (data.duration !== undefined) {\r\n            this.duration = data.duration;\r\n        }\r\n        if (data.easing !== undefined) {\r\n            this.easing = data.easing;\r\n        }\r\n        if (data.factor !== undefined) {\r\n            this.factor = data.factor;\r\n        }\r\n        if (data.maxSpeed !== undefined) {\r\n            this.maxSpeed = data.maxSpeed;\r\n        }\r\n        if (data.speed !== undefined) {\r\n            this.speed = data.speed;\r\n        }\r\n    }\r\n}\r\n", "import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\r\nimport { Attract } from \"./Options/Classes/Attract\";\r\nexport class Attractor extends ExternalInteractorBase {\r\n    constructor(engine, container) {\r\n        super(container);\r\n        this._clickAttract = () => {\r\n            const container = this.container;\r\n            if (!container.attract) {\r\n                container.attract = { particles: [] };\r\n            }\r\n            const { attract } = container;\r\n            if (!attract.finish) {\r\n                if (!attract.count) {\r\n                    attract.count = 0;\r\n                }\r\n                attract.count++;\r\n                if (attract.count === container.particles.count) {\r\n                    attract.finish = true;\r\n                }\r\n            }\r\n            if (attract.clicking) {\r\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\r\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\r\n                    return;\r\n                }\r\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\r\n            }\r\n            else if (attract.clicking === false) {\r\n                attract.particles = [];\r\n            }\r\n            return;\r\n        };\r\n        this._hoverAttract = () => {\r\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\r\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\r\n                return;\r\n            }\r\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\r\n        };\r\n        this._processAttract = (position, attractRadius, area) => {\r\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\r\n            if (!attractOptions) {\r\n                return;\r\n            }\r\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\r\n            for (const particle of query) {\r\n                const { dx, dy, distance } = getDistances(particle.position, position);\r\n                const velocity = attractOptions.speed * attractOptions.factor;\r\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\r\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\r\n                particle.position.subFrom(normVec);\r\n            }\r\n        };\r\n        this._engine = engine;\r\n        if (!container.attract) {\r\n            container.attract = { particles: [] };\r\n        }\r\n        this.handleClickMode = (mode) => {\r\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\r\n            if (!attract || mode !== \"attract\") {\r\n                return;\r\n            }\r\n            if (!container.attract) {\r\n                container.attract = { particles: [] };\r\n            }\r\n            container.attract.clicking = true;\r\n            container.attract.count = 0;\r\n            for (const particle of container.attract.particles) {\r\n                if (!this.isEnabled(particle)) {\r\n                    continue;\r\n                }\r\n                particle.velocity.setTo(particle.initialVelocity);\r\n            }\r\n            container.attract.particles = [];\r\n            container.attract.finish = false;\r\n            setTimeout(() => {\r\n                if (container.destroyed) {\r\n                    return;\r\n                }\r\n                if (!container.attract) {\r\n                    container.attract = { particles: [] };\r\n                }\r\n                container.attract.clicking = false;\r\n            }, attract.duration * 1000);\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\r\n        if (!attract) {\r\n            return;\r\n        }\r\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\r\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\r\n            this._hoverAttract();\r\n        }\r\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\r\n            this._clickAttract();\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\r\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\r\n            return false;\r\n        }\r\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\r\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.attract) {\r\n            options.attract = new Attract();\r\n        }\r\n        for (const source of sources) {\r\n            options.attract.load(source?.attract);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Attractor } from \"./Attractor\";\r\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalAttract\", (container) => new Attractor(engine, container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Attract\";\r\nexport * from \"./Options/Interfaces/IAttract\";\r\n", "export class Bounce {\r\n    constructor() {\r\n        this.distance = 200;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n    }\r\n}\r\n", "import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\r\nimport { Bounce } from \"./Options/Classes/Bounce\";\r\nexport class Bouncer extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this._processBounce = (position, radius, area) => {\r\n            const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\r\n            for (const particle of query) {\r\n                if (area instanceof Circle) {\r\n                    circleBounce(circleBounceDataFromParticle(particle), {\r\n                        position,\r\n                        radius,\r\n                        mass: (radius ** 2 * Math.PI) / 2,\r\n                        velocity: Vector.origin,\r\n                        factor: Vector.origin,\r\n                    });\r\n                }\r\n                else if (area instanceof Rectangle) {\r\n                    rectBounce(particle, calculateBounds(position, radius));\r\n                }\r\n            }\r\n        };\r\n        this._processMouseBounce = () => {\r\n            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\r\n            if (!radius || radius < 0 || !mousePos) {\r\n                return;\r\n            }\r\n            this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\r\n        };\r\n        this._singleSelectorBounce = (selector, div) => {\r\n            const container = this.container, query = document.querySelectorAll(selector);\r\n            if (!query.length) {\r\n                return;\r\n            }\r\n            query.forEach((item) => {\r\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\r\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\r\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\r\n                }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\r\n                    ? new Circle(pos.x, pos.y, radius + tolerance)\r\n                    : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\r\n                this._processBounce(pos, radius, area);\r\n            });\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\r\n        if (!bounce) {\r\n            return;\r\n        }\r\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\r\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\r\n            this._processMouseBounce();\r\n        }\r\n        else {\r\n            divModeExecute(\"bounce\", divs, (selector, div) => this._singleSelectorBounce(selector, div));\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\r\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\r\n            isDivModeEnabled(\"bounce\", divs));\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.bounce) {\r\n            options.bounce = new Bounce();\r\n        }\r\n        for (const source of sources) {\r\n            options.bounce.load(source?.bounce);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Bouncer } from \"./Bouncer\";\r\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalBounce\", (container) => new Bouncer(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Bounce\";\r\nexport * from \"./Options/Interfaces/IBounce\";\r\n", "import { OptionsColor, executeOnSingleOrMultiple, isArray, } from \"tsparticles-engine\";\r\nexport class BubbleBase {\r\n    constructor() {\r\n        this.distance = 200;\r\n        this.duration = 0.4;\r\n        this.mix = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        if (data.duration !== undefined) {\r\n            this.duration = data.duration;\r\n        }\r\n        if (data.mix !== undefined) {\r\n            this.mix = data.mix;\r\n        }\r\n        if (data.opacity !== undefined) {\r\n            this.opacity = data.opacity;\r\n        }\r\n        if (data.color !== undefined) {\r\n            const sourceColor = isArray(this.color) ? undefined : this.color;\r\n            this.color = executeOnSingleOrMultiple(data.color, (color) => {\r\n                return OptionsColor.create(sourceColor, color);\r\n            });\r\n        }\r\n        if (data.size !== undefined) {\r\n            this.size = data.size;\r\n        }\r\n    }\r\n}\r\n", "import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\r\nimport { BubbleBase } from \"./BubbleBase\";\r\nexport class BubbleDiv extends BubbleBase {\r\n    constructor() {\r\n        super();\r\n        this.selectors = [];\r\n    }\r\n    get ids() {\r\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\r\n    }\r\n    set ids(value) {\r\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\r\n    }\r\n    load(data) {\r\n        super.load(data);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.ids !== undefined) {\r\n            this.ids = data.ids;\r\n        }\r\n        if (data.selectors !== undefined) {\r\n            this.selectors = data.selectors;\r\n        }\r\n    }\r\n}\r\n", "import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\r\nimport { BubbleBase } from \"./BubbleBase\";\r\nimport { BubbleDiv } from \"./BubbleDiv\";\r\nexport class Bubble extends BubbleBase {\r\n    load(data) {\r\n        super.load(data);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\r\n            const tmp = new BubbleDiv();\r\n            tmp.load(div);\r\n            return tmp;\r\n        });\r\n    }\r\n}\r\n", "import { clamp } from \"tsparticles-engine\";\r\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\r\n    if (modeValue >= optionsValue) {\r\n        const value = particleValue + (modeValue - optionsValue) * ratio;\r\n        return clamp(value, particleValue, modeValue);\r\n    }\r\n    else if (modeValue < optionsValue) {\r\n        const value = particleValue - (optionsValue - modeValue) * ratio;\r\n        return clamp(value, modeValue, particleValue);\r\n    }\r\n}\r\n", "import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\r\nimport { Bubble } from \"./Options/Classes/Bubble\";\r\nimport { calculateBubbleValue } from \"./Utils\";\r\nexport class Bubbler extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this._clickBubble = () => {\r\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\r\n            if (!bubbleOptions || !mouseClickPos) {\r\n                return;\r\n            }\r\n            if (!container.bubble) {\r\n                container.bubble = {};\r\n            }\r\n            const distance = container.retina.bubbleModeDistance;\r\n            if (!distance || distance < 0) {\r\n                return;\r\n            }\r\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\r\n            for (const particle of query) {\r\n                if (!bubble.clicking) {\r\n                    continue;\r\n                }\r\n                particle.bubble.inRange = !bubble.durationEnd;\r\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\r\n                if (timeSpent > bubbleOptions.duration) {\r\n                    bubble.durationEnd = true;\r\n                }\r\n                if (timeSpent > bubbleOptions.duration * 2) {\r\n                    bubble.clicking = false;\r\n                    bubble.durationEnd = false;\r\n                }\r\n                const sizeData = {\r\n                    bubbleObj: {\r\n                        optValue: container.retina.bubbleModeSize,\r\n                        value: particle.bubble.radius,\r\n                    },\r\n                    particlesObj: {\r\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\r\n                        value: particle.size.value,\r\n                    },\r\n                    type: \"size\",\r\n                };\r\n                this._process(particle, distMouse, timeSpent, sizeData);\r\n                const opacityData = {\r\n                    bubbleObj: {\r\n                        optValue: bubbleOptions.opacity,\r\n                        value: particle.bubble.opacity,\r\n                    },\r\n                    particlesObj: {\r\n                        optValue: getRangeMax(particle.options.opacity.value),\r\n                        value: particle.opacity?.value ?? 1,\r\n                    },\r\n                    type: \"opacity\",\r\n                };\r\n                this._process(particle, distMouse, timeSpent, opacityData);\r\n                if (!bubble.durationEnd && distMouse <= distance) {\r\n                    this._hoverBubbleColor(particle, distMouse);\r\n                }\r\n                else {\r\n                    delete particle.bubble.color;\r\n                }\r\n            }\r\n        };\r\n        this._hoverBubble = () => {\r\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\r\n            if (!distance || distance < 0 || mousePos === undefined) {\r\n                return;\r\n            }\r\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\r\n            for (const particle of query) {\r\n                particle.bubble.inRange = true;\r\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\r\n                if (pointDistance <= distance) {\r\n                    if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\r\n                        this._hoverBubbleSize(particle, ratio);\r\n                        this._hoverBubbleOpacity(particle, ratio);\r\n                        this._hoverBubbleColor(particle, ratio);\r\n                    }\r\n                }\r\n                else {\r\n                    this.reset(particle);\r\n                }\r\n                if (container.interactivity.status === mouseLeaveEvent) {\r\n                    this.reset(particle);\r\n                }\r\n            }\r\n        };\r\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\r\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\r\n            if (!bubbleOptions) {\r\n                return;\r\n            }\r\n            if (!particle.bubble.finalColor) {\r\n                const modeColor = bubbleOptions.color;\r\n                if (!modeColor) {\r\n                    return;\r\n                }\r\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\r\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\r\n            }\r\n            if (!particle.bubble.finalColor) {\r\n                return;\r\n            }\r\n            if (bubbleOptions.mix) {\r\n                particle.bubble.color = undefined;\r\n                const pColor = particle.getFillColor();\r\n                particle.bubble.color = pColor\r\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\r\n                    : particle.bubble.finalColor;\r\n            }\r\n            else {\r\n                particle.bubble.color = particle.bubble.finalColor;\r\n            }\r\n        };\r\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\r\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\r\n            if (!modeOpacity) {\r\n                return;\r\n            }\r\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\r\n            if (opacity !== undefined) {\r\n                particle.bubble.opacity = opacity;\r\n            }\r\n        };\r\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\r\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\r\n            if (modeSize === undefined) {\r\n                return;\r\n            }\r\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\r\n            if (size !== undefined) {\r\n                particle.bubble.radius = size;\r\n            }\r\n        };\r\n        this._process = (particle, distMouse, timeSpent, data) => {\r\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\r\n            if (!bubbleOptions || bubbleParam === undefined) {\r\n                return;\r\n            }\r\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\r\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\r\n                return;\r\n            }\r\n            if (!container.bubble) {\r\n                container.bubble = {};\r\n            }\r\n            if (container.bubble.durationEnd) {\r\n                if (pObjBubble) {\r\n                    if (type === \"size\") {\r\n                        delete particle.bubble.radius;\r\n                    }\r\n                    if (type === \"opacity\") {\r\n                        delete particle.bubble.opacity;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (distMouse <= bubbleDistance) {\r\n                    const obj = pObjBubble ?? pObj;\r\n                    if (obj !== bubbleParam) {\r\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\r\n                        if (type === \"size\") {\r\n                            particle.bubble.radius = value;\r\n                        }\r\n                        if (type === \"opacity\") {\r\n                            particle.bubble.opacity = value;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (type === \"size\") {\r\n                        delete particle.bubble.radius;\r\n                    }\r\n                    if (type === \"opacity\") {\r\n                        delete particle.bubble.opacity;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this._singleSelectorHover = (delta, selector, div) => {\r\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\r\n            if (!bubble || !selectors.length) {\r\n                return;\r\n            }\r\n            selectors.forEach((item) => {\r\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\r\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\r\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\r\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\r\n                    ? new Circle(pos.x, pos.y, repulseRadius)\r\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\r\n                for (const particle of query) {\r\n                    if (!area.contains(particle.getPosition())) {\r\n                        continue;\r\n                    }\r\n                    particle.bubble.inRange = true;\r\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\r\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\r\n                        this.clear(particle, delta, true);\r\n                        particle.bubble.div = elem;\r\n                    }\r\n                    this._hoverBubbleSize(particle, 1, divBubble);\r\n                    this._hoverBubbleOpacity(particle, 1, divBubble);\r\n                    this._hoverBubbleColor(particle, 1, divBubble);\r\n                }\r\n            });\r\n        };\r\n        if (!container.bubble) {\r\n            container.bubble = {};\r\n        }\r\n        this.handleClickMode = (mode) => {\r\n            if (mode !== \"bubble\") {\r\n                return;\r\n            }\r\n            if (!container.bubble) {\r\n                container.bubble = {};\r\n            }\r\n            container.bubble.clicking = true;\r\n        };\r\n    }\r\n    clear(particle, delta, force) {\r\n        if (particle.bubble.inRange && !force) {\r\n            return;\r\n        }\r\n        delete particle.bubble.div;\r\n        delete particle.bubble.opacity;\r\n        delete particle.bubble.radius;\r\n        delete particle.bubble.color;\r\n    }\r\n    init() {\r\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\r\n        if (!bubble) {\r\n            return;\r\n        }\r\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\r\n        if (bubble.size !== undefined) {\r\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\r\n        }\r\n    }\r\n    async interact(delta) {\r\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\r\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\r\n            this._hoverBubble();\r\n        }\r\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\r\n            this._clickBubble();\r\n        }\r\n        else {\r\n            divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(\"bubble\", onDiv);\r\n        if (!(divBubble || (onHover.enable && mouse.position) || (onClick.enable && mouse.clickPosition))) {\r\n            return false;\r\n        }\r\n        return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.bubble) {\r\n            options.bubble = new Bubble();\r\n        }\r\n        for (const source of sources) {\r\n            options.bubble.load(source?.bubble);\r\n        }\r\n    }\r\n    reset(particle) {\r\n        particle.bubble.inRange = false;\r\n    }\r\n}\r\n", "import { Bubbler } from \"./Bubbler\";\r\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalBubble\", (container) => new Bubbler(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/BubbleBase\";\r\nexport * from \"./Options/Classes/BubbleDiv\";\r\nexport * from \"./Options/Classes/Bubble\";\r\nexport * from \"./Options/Interfaces/IBubbleBase\";\r\nexport * from \"./Options/Interfaces/IBubbleDiv\";\r\nexport * from \"./Options/Interfaces/IBubble\";\r\n", "export class ConnectLinks {\r\n    constructor() {\r\n        this.opacity = 0.5;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.opacity !== undefined) {\r\n            this.opacity = data.opacity;\r\n        }\r\n    }\r\n}\r\n", "import { ConnectLinks } from \"./ConnectLinks\";\r\nexport class Connect {\r\n    constructor() {\r\n        this.distance = 80;\r\n        this.links = new ConnectLinks();\r\n        this.radius = 60;\r\n    }\r\n    get lineLinked() {\r\n        return this.links;\r\n    }\r\n    set lineLinked(value) {\r\n        this.links = value;\r\n    }\r\n    get line_linked() {\r\n        return this.links;\r\n    }\r\n    set line_linked(value) {\r\n        this.links = value;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\r\n        if (data.radius !== undefined) {\r\n            this.radius = data.radius;\r\n        }\r\n    }\r\n}\r\n", "import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"tsparticles-engine\";\r\nexport function gradient(context, p1, p2, opacity) {\r\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\r\n    if (!color1 || !color2) {\r\n        return;\r\n    }\r\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\r\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\r\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\r\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\r\n    return grad;\r\n}\r\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\r\n    drawLine(context, begin, end);\r\n    context.lineWidth = width;\r\n    context.strokeStyle = lineStyle;\r\n    context.stroke();\r\n}\r\nexport function lineStyle(container, ctx, p1, p2) {\r\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\r\n    if (!connectOptions) {\r\n        return;\r\n    }\r\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\r\n}\r\nexport function drawConnection(container, p1, p2) {\r\n    container.canvas.draw((ctx) => {\r\n        const ls = lineStyle(container, ctx, p1, p2);\r\n        if (!ls) {\r\n            return;\r\n        }\r\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\r\n        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\r\n    });\r\n}\r\n", "import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\r\nimport { Connect } from \"./Options/Classes/Connect\";\r\nimport { drawConnection } from \"./Utils\";\r\nexport class Connector extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\r\n        if (!connect) {\r\n            return;\r\n        }\r\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\r\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n        const container = this.container, options = container.actualOptions;\r\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\r\n            const mousePos = container.interactivity.mouse.position;\r\n            if (!container.retina.connectModeDistance ||\r\n                container.retina.connectModeDistance < 0 ||\r\n                !container.retina.connectModeRadius ||\r\n                container.retina.connectModeRadius < 0 ||\r\n                !mousePos) {\r\n                return;\r\n            }\r\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\r\n            let i = 0;\r\n            for (const p1 of query) {\r\n                const pos1 = p1.getPosition();\r\n                for (const p2 of query.slice(i + 1)) {\r\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\r\n                    if (xDiff < distMax && yDiff < distMax) {\r\n                        drawConnection(container, p1, p2);\r\n                    }\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\r\n        if (!(events.onHover.enable && mouse.position)) {\r\n            return false;\r\n        }\r\n        return isInArray(\"connect\", events.onHover.mode);\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.connect) {\r\n            options.connect = new Connect();\r\n        }\r\n        for (const source of sources) {\r\n            options.connect.load(source?.connect);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Connector } from \"./Connector\";\r\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalConnect\", (container) => new Connector(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Connect\";\r\nexport * from \"./Options/Classes/ConnectLinks\";\r\nexport * from \"./Options/Interfaces/IConnect\";\r\nexport * from \"./Options/Interfaces/IConnectLinks\";\r\n", "import { OptionsColor } from \"tsparticles-engine\";\r\nexport class GrabLinks {\r\n    constructor() {\r\n        this.blink = false;\r\n        this.consent = false;\r\n        this.opacity = 1;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.blink !== undefined) {\r\n            this.blink = data.blink;\r\n        }\r\n        if (data.color !== undefined) {\r\n            this.color = OptionsColor.create(this.color, data.color);\r\n        }\r\n        if (data.consent !== undefined) {\r\n            this.consent = data.consent;\r\n        }\r\n        if (data.opacity !== undefined) {\r\n            this.opacity = data.opacity;\r\n        }\r\n    }\r\n}\r\n", "import { GrabLinks } from \"./GrabLinks\";\r\nexport class Grab {\r\n    constructor() {\r\n        this.distance = 100;\r\n        this.links = new GrabLinks();\r\n    }\r\n    get lineLinked() {\r\n        return this.links;\r\n    }\r\n    set lineLinked(value) {\r\n        this.links = value;\r\n    }\r\n    get line_linked() {\r\n        return this.links;\r\n    }\r\n    set line_linked(value) {\r\n        this.links = value;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\r\n    }\r\n}\r\n", "import { drawLine, getStyleFromRgb } from \"tsparticles-engine\";\r\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\r\n    drawLine(context, begin, end);\r\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\r\n    context.lineWidth = width;\r\n    context.stroke();\r\n}\r\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\r\n    container.canvas.draw((ctx) => {\r\n        const beginPos = particle.getPosition();\r\n        drawGrabLine(ctx, particle.retina.linksWidth ?? 0, beginPos, mousePos, lineColor, opacity);\r\n    });\r\n}\r\n", "import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\r\nimport { Grab } from \"./Options/Classes/Grab\";\r\nimport { drawGrab } from \"./Utils\";\r\nexport class Grabber extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\r\n        if (!grab) {\r\n            return;\r\n        }\r\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\r\n        if (!interactivity.modes.grab ||\r\n            !interactivity.events.onHover.enable ||\r\n            container.interactivity.status !== mouseMoveEvent) {\r\n            return;\r\n        }\r\n        const mousePos = container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return;\r\n        }\r\n        const distance = container.retina.grabModeDistance;\r\n        if (!distance || distance < 0) {\r\n            return;\r\n        }\r\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\r\n        for (const particle of query) {\r\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\r\n            if (pointDistance > distance) {\r\n                continue;\r\n            }\r\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\r\n            if (opacityLine <= 0) {\r\n                continue;\r\n            }\r\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\r\n            if (!container.particles.grabLineColor && optColor) {\r\n                const linksOptions = interactivity.modes.grab.links;\r\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\r\n            }\r\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\r\n            if (!colorLine) {\r\n                continue;\r\n            }\r\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\r\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.grab) {\r\n            options.grab = new Grab();\r\n        }\r\n        for (const source of sources) {\r\n            options.grab.load(source?.grab);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Grabber } from \"./Grabber\";\r\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalGrab\", (container) => new Grabber(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Grab\";\r\nexport * from \"./Options/Classes/GrabLinks\";\r\nexport * from \"./Options/Interfaces/IGrab\";\r\nexport * from \"./Options/Interfaces/IGrabLinks\";\r\n", "import { ExternalInteractorBase } from \"tsparticles-engine\";\r\nexport class Pauser extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this.handleClickMode = (mode) => {\r\n            if (mode !== \"pause\") {\r\n                return;\r\n            }\r\n            const container = this.container;\r\n            if (container.getAnimationStatus()) {\r\n                container.pause();\r\n            }\r\n            else {\r\n                container.play();\r\n            }\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n    }\r\n    async interact() {\r\n    }\r\n    isEnabled() {\r\n        return true;\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Pauser } from \"./Pauser\";\r\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalPause\", (container) => new Pauser(container), refresh);\r\n}\r\n", "import { setRangeValue } from \"tsparticles-engine\";\r\nexport class Push {\r\n    constructor() {\r\n        this.default = true;\r\n        this.groups = [];\r\n        this.quantity = 4;\r\n    }\r\n    get particles_nb() {\r\n        return this.quantity;\r\n    }\r\n    set particles_nb(value) {\r\n        this.quantity = setRangeValue(value);\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.default !== undefined) {\r\n            this.default = data.default;\r\n        }\r\n        if (data.groups !== undefined) {\r\n            this.groups = data.groups.map((t) => t);\r\n        }\r\n        if (!this.groups.length) {\r\n            this.default = true;\r\n        }\r\n        const quantity = data.quantity ?? data.particles_nb;\r\n        if (quantity !== undefined) {\r\n            this.quantity = setRangeValue(quantity);\r\n        }\r\n    }\r\n}\r\n", "import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"tsparticles-engine\";\r\nimport { Push } from \"./Options/Classes/Push\";\r\nexport class Pusher extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this.handleClickMode = (mode) => {\r\n            if (mode !== \"push\") {\r\n                return;\r\n            }\r\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\r\n            if (!pushOptions) {\r\n                return;\r\n            }\r\n            const quantity = getRangeValue(pushOptions.quantity);\r\n            if (quantity <= 0) {\r\n                return;\r\n            }\r\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\r\n            container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n    }\r\n    async interact() {\r\n    }\r\n    isEnabled() {\r\n        return true;\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.push) {\r\n            options.push = new Push();\r\n        }\r\n        for (const source of sources) {\r\n            options.push.load(source?.push);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Pusher } from \"./Pusher\";\r\nexport async function loadExternalPushInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalPush\", (container) => new Pusher(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Push\";\r\nexport * from \"./Options/Interfaces/IPush\";\r\n", "import { setRangeValue } from \"tsparticles-engine\";\r\nexport class Remove {\r\n    constructor() {\r\n        this.quantity = 2;\r\n    }\r\n    get particles_nb() {\r\n        return this.quantity;\r\n    }\r\n    set particles_nb(value) {\r\n        this.quantity = setRangeValue(value);\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        const quantity = data.quantity ?? data.particles_nb;\r\n        if (quantity !== undefined) {\r\n            this.quantity = setRangeValue(quantity);\r\n        }\r\n    }\r\n}\r\n", "import { ExternalInteractorBase, getRangeValue, } from \"tsparticles-engine\";\r\nimport { Remove } from \"./Options/Classes/Remove\";\r\nexport class Remover extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this.handleClickMode = (mode) => {\r\n            const container = this.container, options = container.actualOptions;\r\n            if (!options.interactivity.modes.remove || mode !== \"remove\") {\r\n                return;\r\n            }\r\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\r\n            container.particles.removeQuantity(removeNb);\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n    }\r\n    async interact() {\r\n    }\r\n    isEnabled() {\r\n        return true;\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.remove) {\r\n            options.remove = new Remove();\r\n        }\r\n        for (const source of sources) {\r\n            options.remove.load(source?.remove);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Remover } from \"./Remover\";\r\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalRemove\", (container) => new Remover(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Remove\";\r\nexport * from \"./Options/Interfaces/IRemove\";\r\n", "export class RepulseBase {\r\n    constructor() {\r\n        this.distance = 200;\r\n        this.duration = 0.4;\r\n        this.factor = 100;\r\n        this.speed = 1;\r\n        this.maxSpeed = 50;\r\n        this.easing = \"ease-out-quad\";\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        if (data.duration !== undefined) {\r\n            this.duration = data.duration;\r\n        }\r\n        if (data.easing !== undefined) {\r\n            this.easing = data.easing;\r\n        }\r\n        if (data.factor !== undefined) {\r\n            this.factor = data.factor;\r\n        }\r\n        if (data.speed !== undefined) {\r\n            this.speed = data.speed;\r\n        }\r\n        if (data.maxSpeed !== undefined) {\r\n            this.maxSpeed = data.maxSpeed;\r\n        }\r\n    }\r\n}\r\n", "import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\r\nimport { RepulseBase } from \"./RepulseBase\";\r\nexport class RepulseDiv extends RepulseBase {\r\n    constructor() {\r\n        super();\r\n        this.selectors = [];\r\n    }\r\n    get ids() {\r\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\r\n    }\r\n    set ids(value) {\r\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\r\n    }\r\n    load(data) {\r\n        super.load(data);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.ids !== undefined) {\r\n            this.ids = data.ids;\r\n        }\r\n        if (data.selectors !== undefined) {\r\n            this.selectors = data.selectors;\r\n        }\r\n    }\r\n}\r\n", "import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\r\nimport { RepulseBase } from \"./RepulseBase\";\r\nimport { RepulseDiv } from \"./RepulseDiv\";\r\nexport class Repulse extends RepulseBase {\r\n    load(data) {\r\n        super.load(data);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\r\n            const tmp = new RepulseDiv();\r\n            tmp.load(div);\r\n            return tmp;\r\n        });\r\n    }\r\n}\r\n", "import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\r\nimport { Repulse } from \"./Options/Classes/Repulse\";\r\nexport class Repulser extends ExternalInteractorBase {\r\n    constructor(engine, container) {\r\n        super(container);\r\n        this._clickRepulse = () => {\r\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\r\n            if (!repulseOptions) {\r\n                return;\r\n            }\r\n            const repulse = container.repulse || { particles: [] };\r\n            if (!repulse.finish) {\r\n                if (!repulse.count) {\r\n                    repulse.count = 0;\r\n                }\r\n                repulse.count++;\r\n                if (repulse.count === container.particles.count) {\r\n                    repulse.finish = true;\r\n                }\r\n            }\r\n            if (repulse.clicking) {\r\n                const repulseDistance = container.retina.repulseModeDistance;\r\n                if (!repulseDistance || repulseDistance < 0) {\r\n                    return;\r\n                }\r\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\r\n                if (mouseClickPos === undefined) {\r\n                    return;\r\n                }\r\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\r\n                for (const particle of query) {\r\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\r\n                    if (d <= repulseRadius) {\r\n                        repulse.particles.push(particle);\r\n                        const vect = Vector.create(dx, dy);\r\n                        vect.length = force;\r\n                        particle.velocity.setTo(vect);\r\n                    }\r\n                }\r\n            }\r\n            else if (repulse.clicking === false) {\r\n                for (const particle of repulse.particles) {\r\n                    particle.velocity.setTo(particle.initialVelocity);\r\n                }\r\n                repulse.particles = [];\r\n            }\r\n        };\r\n        this._hoverRepulse = () => {\r\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\r\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\r\n                return;\r\n            }\r\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\r\n        };\r\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\r\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\r\n            if (!repulseOptions) {\r\n                return;\r\n            }\r\n            for (const particle of query) {\r\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\r\n                particle.position.addTo(normVec);\r\n            }\r\n        };\r\n        this._singleSelectorRepulse = (selector, div) => {\r\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\r\n            if (!repulse) {\r\n                return;\r\n            }\r\n            const query = document.querySelectorAll(selector);\r\n            if (!query.length) {\r\n                return;\r\n            }\r\n            query.forEach((item) => {\r\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\r\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\r\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\r\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\r\n                    ? new Circle(pos.x, pos.y, repulseRadius)\r\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\r\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\r\n            });\r\n        };\r\n        this._engine = engine;\r\n        if (!container.repulse) {\r\n            container.repulse = { particles: [] };\r\n        }\r\n        this.handleClickMode = (mode) => {\r\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\r\n            if (!repulseOpts || mode !== \"repulse\") {\r\n                return;\r\n            }\r\n            if (!container.repulse) {\r\n                container.repulse = { particles: [] };\r\n            }\r\n            const repulse = container.repulse;\r\n            repulse.clicking = true;\r\n            repulse.count = 0;\r\n            for (const particle of container.repulse.particles) {\r\n                if (!this.isEnabled(particle)) {\r\n                    continue;\r\n                }\r\n                particle.velocity.setTo(particle.initialVelocity);\r\n            }\r\n            repulse.particles = [];\r\n            repulse.finish = false;\r\n            setTimeout(() => {\r\n                if (container.destroyed) {\r\n                    return;\r\n                }\r\n                repulse.clicking = false;\r\n            }, repulseOpts.duration * 1000);\r\n        };\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\r\n        if (!repulse) {\r\n            return;\r\n        }\r\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\r\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\r\n            this._hoverRepulse();\r\n        }\r\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\r\n            this._clickRepulse();\r\n        }\r\n        else {\r\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\r\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\r\n            return false;\r\n        }\r\n        const hoverMode = hover.mode, clickMode = click.mode;\r\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.repulse) {\r\n            options.repulse = new Repulse();\r\n        }\r\n        for (const source of sources) {\r\n            options.repulse.load(source?.repulse);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Repulser } from \"./Repulser\";\r\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalRepulse\", (container) => new Repulser(engine, container), refresh);\r\n}\r\nexport * from \"./Options/Classes/RepulseBase\";\r\nexport * from \"./Options/Classes/RepulseDiv\";\r\nexport * from \"./Options/Classes/Repulse\";\r\nexport * from \"./Options/Interfaces/IRepulseBase\";\r\nexport * from \"./Options/Interfaces/IRepulseDiv\";\r\nexport * from \"./Options/Interfaces/IRepulse\";\r\n", "export class Slow {\r\n    constructor() {\r\n        this.factor = 3;\r\n        this.radius = 200;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.factor !== undefined) {\r\n            this.factor = data.factor;\r\n        }\r\n        if (data.radius !== undefined) {\r\n            this.radius = data.radius;\r\n        }\r\n    }\r\n}\r\n", "import { ExternalInteractorBase, getDistance, isInArray, } from \"tsparticles-engine\";\r\nimport { Slow } from \"./Options/Classes/Slow\";\r\nexport class Slower extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n    }\r\n    clear(particle, delta, force) {\r\n        if (particle.slow.inRange && !force) {\r\n            return;\r\n        }\r\n        particle.slow.factor = 1;\r\n    }\r\n    init() {\r\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\r\n        if (!slow) {\r\n            return;\r\n        }\r\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\r\n    }\r\n    async interact() {\r\n    }\r\n    isEnabled(particle) {\r\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\r\n        return events.onHover.enable && !!mouse.position && isInArray(\"slow\", events.onHover.mode);\r\n    }\r\n    loadModeOptions(options, ...sources) {\r\n        if (!options.slow) {\r\n            options.slow = new Slow();\r\n        }\r\n        for (const source of sources) {\r\n            options.slow.load(source?.slow);\r\n        }\r\n    }\r\n    reset(particle) {\r\n        particle.slow.inRange = false;\r\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\r\n        if (!slowOptions || !radius || radius < 0 || !mousePos) {\r\n            return;\r\n        }\r\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\r\n        if (dist > radius) {\r\n            return;\r\n        }\r\n        slow.inRange = true;\r\n        slow.factor = proximityFactor / slowFactor;\r\n    }\r\n}\r\n", "import { Slower } from \"./Slower\";\r\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"externalSlow\", (container) => new Slower(container), refresh);\r\n}\r\nexport * from \"./Options/Classes/Slow\";\r\nexport * from \"./Options/Interfaces/ISlow\";\r\n", "export const InterlaceOffsets = [0, 4, 2, 1];\r\nexport const InterlaceSteps = [8, 8, 4, 2];\r\n", "export class ByteStream {\r\n    constructor(bytes) {\r\n        this.pos = 0;\r\n        this.data = new Uint8ClampedArray(bytes);\r\n    }\r\n    getString(count) {\r\n        const slice = this.data.slice(this.pos, this.pos + count);\r\n        this.pos += slice.length;\r\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\r\n    }\r\n    nextByte() {\r\n        return this.data[this.pos++];\r\n    }\r\n    nextTwoBytes() {\r\n        this.pos += 2;\r\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\r\n    }\r\n    readSubBlocks() {\r\n        let blockString = \"\", size = 0;\r\n        do {\r\n            size = this.data[this.pos++];\r\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\r\n            }\r\n        } while (size !== 0);\r\n        return blockString;\r\n    }\r\n    readSubBlocksBin() {\r\n        let size = 0, len = 0;\r\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\r\n            len += size;\r\n        }\r\n        const blockData = new Uint8Array(len);\r\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\r\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\r\n            }\r\n        }\r\n        return blockData;\r\n    }\r\n    skipSubBlocks() {\r\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\r\n        }\r\n        this.pos++;\r\n    }\r\n}\r\n", "import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\r\nimport { ByteStream } from \"./ByteStream\";\r\nfunction parseColorTable(byteStream, count) {\r\n    const colors = [];\r\n    for (let i = 0; i < count; i++) {\r\n        colors.push({\r\n            r: byteStream.data[byteStream.pos],\r\n            g: byteStream.data[byteStream.pos + 1],\r\n            b: byteStream.data[byteStream.pos + 2],\r\n        });\r\n        byteStream.pos += 3;\r\n    }\r\n    return colors;\r\n}\r\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\r\n    switch (byteStream.nextByte()) {\r\n        case 249: {\r\n            const frame = gif.frames[getFrameIndex(false)];\r\n            byteStream.pos++;\r\n            const packedByte = byteStream.nextByte();\r\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\r\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\r\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\r\n            const transparencyFlag = (packedByte & 1) === 1;\r\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\r\n            const transparencyIndex = byteStream.nextByte();\r\n            if (transparencyFlag) {\r\n                getTransparencyIndex(transparencyIndex);\r\n            }\r\n            byteStream.pos++;\r\n            break;\r\n        }\r\n        case 255: {\r\n            byteStream.pos++;\r\n            const applicationExtension = {\r\n                identifier: byteStream.getString(8),\r\n                authenticationCode: byteStream.getString(3),\r\n                data: byteStream.readSubBlocksBin(),\r\n            };\r\n            gif.applicationExtensions.push(applicationExtension);\r\n            break;\r\n        }\r\n        case 254: {\r\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (gif.globalColorTable.length === 0) {\r\n                throw new EvalError(\"plain text extension without global color table\");\r\n            }\r\n            byteStream.pos++;\r\n            gif.frames[getFrameIndex(false)].plainTextData = {\r\n                left: byteStream.nextTwoBytes(),\r\n                top: byteStream.nextTwoBytes(),\r\n                width: byteStream.nextTwoBytes(),\r\n                height: byteStream.nextTwoBytes(),\r\n                charSize: {\r\n                    width: byteStream.nextTwoBytes(),\r\n                    height: byteStream.nextTwoBytes(),\r\n                },\r\n                foregroundColor: byteStream.nextByte(),\r\n                backgroundColor: byteStream.nextByte(),\r\n                text: byteStream.readSubBlocks(),\r\n            };\r\n            break;\r\n        }\r\n        default:\r\n            byteStream.skipSubBlocks();\r\n            break;\r\n    }\r\n}\r\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\r\n    const frame = gif.frames[getFrameIndex(true)];\r\n    frame.left = byteStream.nextTwoBytes();\r\n    frame.top = byteStream.nextTwoBytes();\r\n    frame.width = byteStream.nextTwoBytes();\r\n    frame.height = byteStream.nextTwoBytes();\r\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\r\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\r\n    frame.reserved = (packedByte & 0x18) >>> 3;\r\n    const localColorCount = 1 << ((packedByte & 7) + 1);\r\n    if (localColorTableFlag) {\r\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\r\n    }\r\n    const getColor = (index) => {\r\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\r\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\r\n    };\r\n    const image = (() => {\r\n        try {\r\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\r\n        }\r\n        catch (error) {\r\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    })();\r\n    if (image == null) {\r\n        throw new EvalError(\"GIF frame size is to large\");\r\n    }\r\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\r\n    const readBits = (pos, len) => {\r\n        const bytePos = pos >>> 3, bitPos = pos & 7;\r\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\r\n            (((1 << len) - 1) << bitPos)) >>>\r\n            bitPos);\r\n    };\r\n    if (interlacedFlag) {\r\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\r\n            if (InterlaceOffsets[pass] < frame.height) {\r\n                for (let pixelPos = 0, lineIndex = 0;;) {\r\n                    const last = code;\r\n                    code = readBits(pos, size);\r\n                    pos += size + 1;\r\n                    if (code === clearCode) {\r\n                        size = minCodeSize + 1;\r\n                        dic.length = clearCode + 2;\r\n                        for (let i = 0; i < dic.length; i++) {\r\n                            dic[i] = i < clearCode ? [i] : [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (code >= dic.length) {\r\n                            dic.push(dic[last].concat(dic[last][0]));\r\n                        }\r\n                        else if (last !== clearCode) {\r\n                            dic.push(dic[last].concat(dic[code][0]));\r\n                        }\r\n                        for (let i = 0; i < dic[code].length; i++) {\r\n                            const { r, g, b, a } = getColor(dic[code][i]);\r\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\r\n                                InterlaceSteps[pass] * lineIndex +\r\n                                (pixelPos % (frame.width * 4)));\r\n                            pixelPos += 4;\r\n                        }\r\n                        if (dic.length === 1 << size && size < 0xc) {\r\n                            size++;\r\n                        }\r\n                    }\r\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\r\n                        lineIndex++;\r\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\r\n        }\r\n        frame.image = image;\r\n        frame.bitmap = await createImageBitmap(image);\r\n    }\r\n    else {\r\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\r\n            const last = code;\r\n            code = readBits(pos, size);\r\n            pos += size;\r\n            if (code === clearCode) {\r\n                size = minCodeSize + 1;\r\n                dic.length = clearCode + 2;\r\n                for (let i = 0; i < dic.length; i++) {\r\n                    dic[i] = i < clearCode ? [i] : [];\r\n                }\r\n            }\r\n            else {\r\n                if (code === clearCode + 1) {\r\n                    break;\r\n                }\r\n                if (code >= dic.length) {\r\n                    dic.push(dic[last].concat(dic[last][0]));\r\n                }\r\n                else if (last !== clearCode) {\r\n                    dic.push(dic[last].concat(dic[code][0]));\r\n                }\r\n                for (let i = 0; i < dic[code].length; i++) {\r\n                    const { r, g, b, a } = getColor(dic[code][i]);\r\n                    image.data.set([r, g, b, a], (pixelPos += 4));\r\n                }\r\n                if (dic.length >= 1 << size && size < 0xc) {\r\n                    size++;\r\n                }\r\n            }\r\n        }\r\n        frame.image = image;\r\n        frame.bitmap = await createImageBitmap(image);\r\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\r\n    }\r\n}\r\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\r\n    switch (byteStream.nextByte()) {\r\n        case 59:\r\n            return true;\r\n        case 44:\r\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\r\n            break;\r\n        case 33:\r\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\r\n            break;\r\n        default:\r\n            throw new EvalError(\"undefined block found\");\r\n    }\r\n    return false;\r\n}\r\nexport function getGIFLoopAmount(gif) {\r\n    for (const extension of gif.applicationExtensions) {\r\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\r\n            continue;\r\n        }\r\n        return extension.data[1] + (extension.data[2] << 8);\r\n    }\r\n    return NaN;\r\n}\r\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\r\n    if (!avgAlpha)\r\n        avgAlpha = false;\r\n    const res = await fetch(gifURL);\r\n    if (!res.ok && res.status === 404) {\r\n        throw new EvalError(\"file not found\");\r\n    }\r\n    const buffer = await res.arrayBuffer();\r\n    const gif = {\r\n        width: 0,\r\n        height: 0,\r\n        totalTime: 0,\r\n        colorRes: 0,\r\n        pixelAspectRatio: 0,\r\n        frames: [],\r\n        sortFlag: false,\r\n        globalColorTable: [],\r\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\r\n        comments: [],\r\n        applicationExtensions: [],\r\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\r\n    if (byteStream.getString(6) !== \"GIF89a\") {\r\n        throw new Error(\"not a supported GIF file\");\r\n    }\r\n    gif.width = byteStream.nextTwoBytes();\r\n    gif.height = byteStream.nextTwoBytes();\r\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\r\n    gif.colorRes = (packedByte & 0x70) >>> 4;\r\n    gif.sortFlag = (packedByte & 8) === 8;\r\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\r\n    gif.pixelAspectRatio = byteStream.nextByte();\r\n    if (gif.pixelAspectRatio !== 0) {\r\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\r\n    }\r\n    if (globalColorTableFlag) {\r\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\r\n    }\r\n    const backgroundImage = (() => {\r\n        try {\r\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\r\n        }\r\n        catch (error) {\r\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    })();\r\n    if (backgroundImage == null) {\r\n        throw new Error(\"GIF frame size is to large\");\r\n    }\r\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\r\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\r\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\r\n        backgroundImage.data.copyWithin(i, 0, i);\r\n    }\r\n    gif.backgroundImage = backgroundImage;\r\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\r\n    const getframeIndex = (increment) => {\r\n        if (increment) {\r\n            incrementFrameIndex = true;\r\n        }\r\n        return frameIndex;\r\n    };\r\n    const getTransparencyIndex = (newValue) => {\r\n        if (newValue != null) {\r\n            transparencyIndex = newValue;\r\n        }\r\n        return transparencyIndex;\r\n    };\r\n    try {\r\n        do {\r\n            if (incrementFrameIndex) {\r\n                gif.frames.push({\r\n                    left: 0,\r\n                    top: 0,\r\n                    width: 0,\r\n                    height: 0,\r\n                    disposalMethod: 0,\r\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\r\n                    plainTextData: null,\r\n                    userInputDelayFlag: false,\r\n                    delayTime: 0,\r\n                    sortFlag: false,\r\n                    localColorTable: [],\r\n                    reserved: 0,\r\n                    GCreserved: 0,\r\n                });\r\n                frameIndex++;\r\n                transparencyIndex = -1;\r\n                incrementFrameIndex = false;\r\n            }\r\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\r\n        gif.frames.length--;\r\n        for (const frame of gif.frames) {\r\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\r\n                gif.totalTime = Infinity;\r\n                break;\r\n            }\r\n            gif.totalTime += frame.delayTime;\r\n        }\r\n        return gif;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof EvalError) {\r\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n", "import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\r\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\r\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\r\nfunction replaceColorSvg(imageShape, color, opacity) {\r\n    const { svgData } = imageShape;\r\n    if (!svgData) {\r\n        return \"\";\r\n    }\r\n    const colorStyle = getStyleFromHsl(color, opacity);\r\n    if (svgData.includes(\"fill\")) {\r\n        return svgData.replace(currentColorRegex, () => colorStyle);\r\n    }\r\n    const preFillIndex = svgData.indexOf(\">\");\r\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\r\n}\r\nexport async function loadImage(image) {\r\n    return new Promise((resolve) => {\r\n        image.loading = true;\r\n        const img = new Image();\r\n        image.element = img;\r\n        img.addEventListener(\"load\", () => {\r\n            image.loading = false;\r\n            resolve();\r\n        });\r\n        img.addEventListener(\"error\", () => {\r\n            image.element = undefined;\r\n            image.error = true;\r\n            image.loading = false;\r\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\r\n            resolve();\r\n        });\r\n        img.src = image.source;\r\n    });\r\n}\r\nexport async function loadGifImage(image) {\r\n    if (image.type !== \"gif\") {\r\n        await loadImage(image);\r\n        return;\r\n    }\r\n    image.loading = true;\r\n    try {\r\n        image.gifData = await decodeGIF(image.source);\r\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\r\n        if (image.gifLoopCount === 0) {\r\n            image.gifLoopCount = Infinity;\r\n        }\r\n    }\r\n    catch {\r\n        image.error = true;\r\n    }\r\n    image.loading = false;\r\n}\r\nexport async function downloadSvgImage(image) {\r\n    if (image.type !== \"svg\") {\r\n        await loadImage(image);\r\n        return;\r\n    }\r\n    image.loading = true;\r\n    const response = await fetch(image.source);\r\n    if (!response.ok) {\r\n        getLogger().error(`${errorPrefix} Image not found`);\r\n        image.error = true;\r\n    }\r\n    else {\r\n        image.svgData = await response.text();\r\n    }\r\n    image.loading = false;\r\n}\r\nexport function replaceImageColor(image, imageData, color, particle) {\r\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\r\n        color,\r\n        gif: imageData.gif,\r\n        data: {\r\n            ...image,\r\n            svgData: svgColoredData,\r\n        },\r\n        loaded: false,\r\n        ratio: imageData.width / imageData.height,\r\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\r\n        source: imageData.src,\r\n    };\r\n    return new Promise((resolve) => {\r\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\r\n        img.addEventListener(\"load\", () => {\r\n            imageRes.loaded = true;\r\n            imageRes.element = img;\r\n            resolve(imageRes);\r\n            domUrl.revokeObjectURL(url);\r\n        });\r\n        img.addEventListener(\"error\", async () => {\r\n            domUrl.revokeObjectURL(url);\r\n            const img2 = {\r\n                ...image,\r\n                error: false,\r\n                loading: true,\r\n            };\r\n            await loadImage(img2);\r\n            imageRes.loaded = true;\r\n            imageRes.element = img2.element;\r\n            resolve(imageRes);\r\n        });\r\n        img.src = url;\r\n    });\r\n}\r\n", "import { errorPrefix } from \"tsparticles-engine\";\r\nimport { replaceImageColor } from \"./Utils\";\r\nexport class ImageDrawer {\r\n    constructor(engine) {\r\n        this.loadImageShape = async (imageShape) => {\r\n            if (!this._engine.loadImage) {\r\n                throw new Error(`${errorPrefix} image shape not initialized`);\r\n            }\r\n            await this._engine.loadImage({\r\n                gif: imageShape.gif,\r\n                name: imageShape.name,\r\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\r\n                src: imageShape.src,\r\n            });\r\n        };\r\n        this._engine = engine;\r\n    }\r\n    addImage(image) {\r\n        if (!this._engine.images) {\r\n            this._engine.images = [];\r\n        }\r\n        this._engine.images.push(image);\r\n    }\r\n    draw(context, particle, radius, opacity, delta) {\r\n        const image = particle.image, element = image?.element;\r\n        if (!image) {\r\n            return;\r\n        }\r\n        context.globalAlpha = opacity;\r\n        if (image.gif && image.gifData) {\r\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\r\n            if (!offscreenContext) {\r\n                throw new Error(\"could not create offscreen canvas context\");\r\n            }\r\n            offscreenContext.imageSmoothingQuality = \"low\";\r\n            offscreenContext.imageSmoothingEnabled = false;\r\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n            if (particle.gifLoopCount === undefined) {\r\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\r\n            }\r\n            let frameIndex = particle.gifFrame ?? 0;\r\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\r\n            if (particle.gifTime === undefined) {\r\n                particle.gifTime = 0;\r\n            }\r\n            if (!frame.bitmap) {\r\n                return;\r\n            }\r\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\r\n            switch (frame.disposalMethod) {\r\n                case 4:\r\n                case 5:\r\n                case 6:\r\n                case 7:\r\n                case 0:\r\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\r\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\r\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n                    break;\r\n                case 1:\r\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\r\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\r\n                    break;\r\n                case 2:\r\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\r\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\r\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n                    if (image.gifData.globalColorTable.length === 0) {\r\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\r\n                    }\r\n                    else {\r\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    {\r\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\r\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\r\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n                        offscreenContext.putImageData(previousImageData, 0, 0);\r\n                    }\r\n                    break;\r\n            }\r\n            particle.gifTime += delta.value;\r\n            if (particle.gifTime > frame.delayTime) {\r\n                particle.gifTime -= frame.delayTime;\r\n                if (++frameIndex >= image.gifData.frames.length) {\r\n                    if (--particle.gifLoopCount <= 0) {\r\n                        return;\r\n                    }\r\n                    frameIndex = 0;\r\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n                }\r\n                particle.gifFrame = frameIndex;\r\n            }\r\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\r\n        }\r\n        else if (element) {\r\n            const ratio = image.ratio, pos = {\r\n                x: -radius,\r\n                y: -radius,\r\n            };\r\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\r\n        }\r\n        context.globalAlpha = 1;\r\n    }\r\n    getSidesCount() {\r\n        return 12;\r\n    }\r\n    async init(container) {\r\n        const options = container.actualOptions;\r\n        if (!options.preload || !this._engine.loadImage) {\r\n            return;\r\n        }\r\n        for (const imageData of options.preload) {\r\n            await this._engine.loadImage(imageData);\r\n        }\r\n    }\r\n    loadShape(particle) {\r\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\r\n            return;\r\n        }\r\n        if (!this._engine.images) {\r\n            this._engine.images = [];\r\n        }\r\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\r\n        if (!image) {\r\n            this.loadImageShape(imageData).then(() => {\r\n                this.loadShape(particle);\r\n            });\r\n        }\r\n    }\r\n    particleInit(container, particle) {\r\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\r\n            return;\r\n        }\r\n        if (!this._engine.images) {\r\n            this._engine.images = [];\r\n        }\r\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\r\n        if (!image) {\r\n            return;\r\n        }\r\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\r\n        if (image.loading) {\r\n            setTimeout(() => {\r\n                this.particleInit(container, particle);\r\n            });\r\n            return;\r\n        }\r\n        (async () => {\r\n            let imageRes;\r\n            if (image.svgData && color) {\r\n                imageRes = await replaceImageColor(image, imageData, color, particle);\r\n            }\r\n            else {\r\n                imageRes = {\r\n                    color,\r\n                    data: image,\r\n                    element: image.element,\r\n                    gif: image.gif,\r\n                    gifData: image.gifData,\r\n                    gifLoopCount: image.gifLoopCount,\r\n                    loaded: true,\r\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\r\n                    replaceColor: replaceColor,\r\n                    source: imageData.src,\r\n                };\r\n            }\r\n            if (!imageRes.ratio) {\r\n                imageRes.ratio = 1;\r\n            }\r\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\r\n                image: imageRes,\r\n                fill,\r\n                close,\r\n            };\r\n            particle.image = imageShape.image;\r\n            particle.fill = imageShape.fill;\r\n            particle.close = imageShape.close;\r\n        })();\r\n    }\r\n}\r\n", "export class Preload {\r\n    constructor() {\r\n        this.src = \"\";\r\n        this.gif = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.gif !== undefined) {\r\n            this.gif = data.gif;\r\n        }\r\n        if (data.height !== undefined) {\r\n            this.height = data.height;\r\n        }\r\n        if (data.name !== undefined) {\r\n            this.name = data.name;\r\n        }\r\n        if (data.replaceColor !== undefined) {\r\n            this.replaceColor = data.replaceColor;\r\n        }\r\n        if (data.src !== undefined) {\r\n            this.src = data.src;\r\n        }\r\n        if (data.width !== undefined) {\r\n            this.width = data.width;\r\n        }\r\n    }\r\n}\r\n", "import { Preload } from \"./Options/Classes/Preload\";\r\nexport class ImagePreloaderPlugin {\r\n    constructor(engine) {\r\n        this.id = \"imagePreloader\";\r\n        this._engine = engine;\r\n    }\r\n    getPlugin() {\r\n        return {};\r\n    }\r\n    loadOptions(options, source) {\r\n        if (!source || !source.preload) {\r\n            return;\r\n        }\r\n        if (!options.preload) {\r\n            options.preload = [];\r\n        }\r\n        const preloadOptions = options.preload;\r\n        for (const item of source.preload) {\r\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\r\n            if (existing) {\r\n                existing.load(item);\r\n            }\r\n            else {\r\n                const preload = new Preload();\r\n                preload.load(item);\r\n                preloadOptions.push(preload);\r\n            }\r\n        }\r\n    }\r\n    needsPlugin() {\r\n        return true;\r\n    }\r\n}\r\n", "import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\r\nimport { ImageDrawer } from \"./ImageDrawer\";\r\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\r\nimport { errorPrefix } from \"tsparticles-engine\";\r\nfunction addLoadImageToEngine(engine) {\r\n    if (engine.loadImage) {\r\n        return;\r\n    }\r\n    engine.loadImage = async (data) => {\r\n        if (!data.name && !data.src) {\r\n            throw new Error(`${errorPrefix} no image source provided`);\r\n        }\r\n        if (!engine.images) {\r\n            engine.images = [];\r\n        }\r\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\r\n            return;\r\n        }\r\n        try {\r\n            const image = {\r\n                gif: data.gif ?? false,\r\n                name: data.name ?? data.src,\r\n                source: data.src,\r\n                type: data.src.substring(data.src.length - 3),\r\n                error: false,\r\n                loading: true,\r\n                replaceColor: data.replaceColor,\r\n                ratio: data.width && data.height ? data.width / data.height : undefined,\r\n            };\r\n            engine.images.push(image);\r\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\r\n            await imageFunc(image);\r\n        }\r\n        catch {\r\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\r\n        }\r\n    };\r\n}\r\nexport async function loadImageShape(engine, refresh = true) {\r\n    addLoadImageToEngine(engine);\r\n    const preloader = new ImagePreloaderPlugin(engine);\r\n    await engine.addPlugin(preloader, refresh);\r\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\r\n}\r\n", "import { ValueWithRandom } from \"tsparticles-engine\";\r\nexport class LifeDelay extends ValueWithRandom {\r\n    constructor() {\r\n        super();\r\n        this.sync = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        super.load(data);\r\n        if (data.sync !== undefined) {\r\n            this.sync = data.sync;\r\n        }\r\n    }\r\n}\r\n", "import { ValueWithRandom } from \"tsparticles-engine\";\r\nexport class LifeDuration extends ValueWithRandom {\r\n    constructor() {\r\n        super();\r\n        this.random.minimumValue = 0.0001;\r\n        this.sync = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        super.load(data);\r\n        if (data.sync !== undefined) {\r\n            this.sync = data.sync;\r\n        }\r\n    }\r\n}\r\n", "import { LifeDelay } from \"./LifeDelay\";\r\nimport { LifeDuration } from \"./LifeDuration\";\r\nexport class Life {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.delay = new LifeDelay();\r\n        this.duration = new LifeDuration();\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.count !== undefined) {\r\n            this.count = data.count;\r\n        }\r\n        this.delay.load(data.delay);\r\n        this.duration.load(data.duration);\r\n    }\r\n}\r\n", "import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\r\nimport { Life } from \"./Options/Classes/Life\";\r\nexport class LifeUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\r\n        if (!lifeOptions) {\r\n            return;\r\n        }\r\n        particle.life = {\r\n            delay: container.retina.reduceFactor\r\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\r\n                    container.retina.reduceFactor) *\r\n                    1000\r\n                : 0,\r\n            delayTime: 0,\r\n            duration: container.retina.reduceFactor\r\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\r\n                    container.retina.reduceFactor) *\r\n                    1000\r\n                : 0,\r\n            time: 0,\r\n            count: lifeOptions.count,\r\n        };\r\n        if (particle.life.duration <= 0) {\r\n            particle.life.duration = -1;\r\n        }\r\n        if (particle.life.count <= 0) {\r\n            particle.life.count = -1;\r\n        }\r\n        if (particle.life) {\r\n            particle.spawning = particle.life.delay > 0;\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return !particle.destroyed;\r\n    }\r\n    loadOptions(options, ...sources) {\r\n        if (!options.life) {\r\n            options.life = new Life();\r\n        }\r\n        for (const source of sources) {\r\n            options.life.load(source?.life);\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle) || !particle.life) {\r\n            return;\r\n        }\r\n        const life = particle.life;\r\n        let justSpawned = false;\r\n        if (particle.spawning) {\r\n            life.delayTime += delta.value;\r\n            if (life.delayTime >= particle.life.delay) {\r\n                justSpawned = true;\r\n                particle.spawning = false;\r\n                life.delayTime = 0;\r\n                life.time = 0;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        if (life.duration === -1) {\r\n            return;\r\n        }\r\n        if (particle.spawning) {\r\n            return;\r\n        }\r\n        if (justSpawned) {\r\n            life.time = 0;\r\n        }\r\n        else {\r\n            life.time += delta.value;\r\n        }\r\n        if (life.time < life.duration) {\r\n            return;\r\n        }\r\n        life.time = 0;\r\n        if (particle.life.count > 0) {\r\n            particle.life.count--;\r\n        }\r\n        if (particle.life.count === 0) {\r\n            particle.destroy();\r\n            return;\r\n        }\r\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\r\n        particle.position.x = randomInRange(widthRange);\r\n        particle.position.y = randomInRange(heightRange);\r\n        particle.spawning = true;\r\n        life.delayTime = 0;\r\n        life.time = 0;\r\n        particle.reset();\r\n        const lifeOptions = particle.options.life;\r\n        if (lifeOptions) {\r\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\r\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\r\n        }\r\n    }\r\n}\r\n", "import { LifeUpdater } from \"./LifeUpdater\";\r\nexport async function loadLifeUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container), refresh);\r\n}\r\n", "export class LineDrawer {\r\n    draw(context, particle, radius) {\r\n        const shapeData = particle.shapeData;\r\n        context.moveTo(-radius / 2, 0);\r\n        context.lineTo(radius / 2, 0);\r\n        context.lineCap = shapeData?.cap ?? \"butt\";\r\n    }\r\n    getSidesCount() {\r\n        return 1;\r\n    }\r\n}\r\n", "import { LineDrawer } from \"./LineDrawer\";\r\nexport async function loadLineShape(engine, refresh = true) {\r\n    await engine.addShape(\"line\", new LineDrawer(), refresh);\r\n}\r\n", "import { isSsr } from \"tsparticles-engine\";\r\nexport class ParallaxMover {\r\n    init() {\r\n    }\r\n    isEnabled(particle) {\r\n        return (!isSsr() &&\r\n            !particle.destroyed &&\r\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\r\n    }\r\n    move(particle) {\r\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\r\n        if (isSsr() || !parallaxOptions.enable) {\r\n            return;\r\n        }\r\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return;\r\n        }\r\n        const canvasSize = container.canvas.size, canvasCenter = {\r\n            x: canvasSize.width / 2,\r\n            y: canvasSize.height / 2,\r\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\r\n            x: (mousePos.x - canvasCenter.x) * factor,\r\n            y: (mousePos.y - canvasCenter.y) * factor,\r\n        }, { offset } = particle;\r\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\r\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\r\n    }\r\n}\r\n", "import { ParallaxMover } from \"./ParallaxMover\";\r\nexport async function loadParallaxMover(engine, refresh = true) {\r\n    await engine.addMover(\"parallax\", () => new ParallaxMover(), refresh);\r\n}\r\n", "import { ParticlesInteractorBase, getDistances, } from \"tsparticles-engine\";\r\nexport class Attractor extends ParticlesInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n    }\r\n    async interact(p1) {\r\n        const container = this.container, distance = p1.retina.attractDistance ?? container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\r\n        for (const p2 of query) {\r\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\r\n                continue;\r\n            }\r\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;\r\n            p1.velocity.x -= ax * p1Factor;\r\n            p1.velocity.y -= ay * p1Factor;\r\n            p2.velocity.x += ax * p2Factor;\r\n            p2.velocity.y += ay * p2Factor;\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return particle.options.move.attract.enable;\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Attractor } from \"./Attractor\";\r\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"particlesAttract\", (container) => new Attractor(container), refresh);\r\n}\r\n", "import { clamp } from \"tsparticles-engine\";\r\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\r\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / 10, 0, r2);\r\n    p1.size.value += factor / 2;\r\n    p2.size.value -= factor;\r\n    if (r2 <= pixelRatio) {\r\n        p2.size.value = 0;\r\n        p2.destroy();\r\n    }\r\n}\r\nexport function absorb(p1, p2, delta, pixelRatio) {\r\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\r\n    if (r1 === undefined && r2 !== undefined) {\r\n        p1.destroy();\r\n    }\r\n    else if (r1 !== undefined && r2 === undefined) {\r\n        p2.destroy();\r\n    }\r\n    else if (r1 !== undefined && r2 !== undefined) {\r\n        if (r1 >= r2) {\r\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\r\n        }\r\n        else {\r\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\r\n        }\r\n    }\r\n}\r\n", "import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"tsparticles-engine\";\r\nconst fixBounceSpeed = (p) => {\r\n    if (p.collisionMaxSpeed === undefined) {\r\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\r\n    }\r\n    if (p.velocity.length > p.collisionMaxSpeed) {\r\n        p.velocity.length = p.collisionMaxSpeed;\r\n    }\r\n};\r\nexport function bounce(p1, p2) {\r\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\r\n    fixBounceSpeed(p1);\r\n    fixBounceSpeed(p2);\r\n}\r\n", "import { bounce } from \"./Bounce\";\r\nexport function destroy(p1, p2) {\r\n    if (!p1.unbreakable && !p2.unbreakable) {\r\n        bounce(p1, p2);\r\n    }\r\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\r\n        p1.destroy();\r\n    }\r\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\r\n        p2.destroy();\r\n    }\r\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\r\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\r\n        deleteP.destroy();\r\n    }\r\n}\r\n", "import { absorb } from \"./Absorb\";\r\nimport { bounce } from \"./Bounce\";\r\nimport { destroy } from \"./Destroy\";\r\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\r\n    switch (p1.options.collisions.mode) {\r\n        case \"absorb\": {\r\n            absorb(p1, p2, delta, pixelRatio);\r\n            break;\r\n        }\r\n        case \"bounce\": {\r\n            bounce(p1, p2);\r\n            break;\r\n        }\r\n        case \"destroy\": {\r\n            destroy(p1, p2);\r\n            break;\r\n        }\r\n    }\r\n}\r\n", "import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\r\nimport { resolveCollision } from \"./ResolveCollision\";\r\nexport class Collider extends ParticlesInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n    }\r\n    async interact(p1, delta) {\r\n        if (p1.destroyed || p1.spawning) {\r\n            return;\r\n        }\r\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\r\n        for (const p2 of query) {\r\n            if (p1 === p2 ||\r\n                !p2.options.collisions.enable ||\r\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\r\n                p2.destroyed ||\r\n                p2.spawning) {\r\n                continue;\r\n            }\r\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\r\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\r\n                continue;\r\n            }\r\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\r\n            if (dist > distP) {\r\n                continue;\r\n            }\r\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return particle.options.collisions.enable;\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Collider } from \"./Collider\";\r\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"particlesCollisions\", (container) => new Collider(container), refresh);\r\n}\r\n", "import { Circle, Rectangle } from \"tsparticles-engine\";\r\nexport class CircleWarp extends Circle {\r\n    constructor(x, y, radius, canvasSize) {\r\n        super(x, y, radius);\r\n        this.canvasSize = canvasSize;\r\n        this.canvasSize = { ...canvasSize };\r\n    }\r\n    contains(point) {\r\n        const { width, height } = this.canvasSize;\r\n        const { x, y } = point;\r\n        return (super.contains(point) ||\r\n            super.contains({ x: x - width, y }) ||\r\n            super.contains({ x: x - width, y: y - height }) ||\r\n            super.contains({ x, y: y - height }));\r\n    }\r\n    intersects(range) {\r\n        if (super.intersects(range)) {\r\n            return true;\r\n        }\r\n        const rect = range, circle = range, newPos = {\r\n            x: range.position.x - this.canvasSize.width,\r\n            y: range.position.y - this.canvasSize.height,\r\n        };\r\n        if (circle.radius !== undefined) {\r\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\r\n            return super.intersects(biggerCircle);\r\n        }\r\n        else if (rect.size !== undefined) {\r\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\r\n            return super.intersects(rectSW);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "import { OptionsColor } from \"tsparticles-engine\";\r\nexport class LinksShadow {\r\n    constructor() {\r\n        this.blur = 5;\r\n        this.color = new OptionsColor();\r\n        this.color.value = \"#000\";\r\n        this.enable = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.blur !== undefined) {\r\n            this.blur = data.blur;\r\n        }\r\n        this.color = OptionsColor.create(this.color, data.color);\r\n        if (data.enable !== undefined) {\r\n            this.enable = data.enable;\r\n        }\r\n    }\r\n}\r\n", "import { OptionsColor } from \"tsparticles-engine\";\r\nexport class LinksTriangle {\r\n    constructor() {\r\n        this.enable = false;\r\n        this.frequency = 1;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.color !== undefined) {\r\n            this.color = OptionsColor.create(this.color, data.color);\r\n        }\r\n        if (data.enable !== undefined) {\r\n            this.enable = data.enable;\r\n        }\r\n        if (data.frequency !== undefined) {\r\n            this.frequency = data.frequency;\r\n        }\r\n        if (data.opacity !== undefined) {\r\n            this.opacity = data.opacity;\r\n        }\r\n    }\r\n}\r\n", "import { OptionsColor } from \"tsparticles-engine\";\r\nimport { LinksShadow } from \"./LinksShadow\";\r\nimport { LinksTriangle } from \"./LinksTriangle\";\r\nexport class Links {\r\n    constructor() {\r\n        this.blink = false;\r\n        this.color = new OptionsColor();\r\n        this.color.value = \"#fff\";\r\n        this.consent = false;\r\n        this.distance = 100;\r\n        this.enable = false;\r\n        this.frequency = 1;\r\n        this.opacity = 1;\r\n        this.shadow = new LinksShadow();\r\n        this.triangles = new LinksTriangle();\r\n        this.width = 1;\r\n        this.warp = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.id !== undefined) {\r\n            this.id = data.id;\r\n        }\r\n        if (data.blink !== undefined) {\r\n            this.blink = data.blink;\r\n        }\r\n        this.color = OptionsColor.create(this.color, data.color);\r\n        if (data.consent !== undefined) {\r\n            this.consent = data.consent;\r\n        }\r\n        if (data.distance !== undefined) {\r\n            this.distance = data.distance;\r\n        }\r\n        if (data.enable !== undefined) {\r\n            this.enable = data.enable;\r\n        }\r\n        if (data.frequency !== undefined) {\r\n            this.frequency = data.frequency;\r\n        }\r\n        if (data.opacity !== undefined) {\r\n            this.opacity = data.opacity;\r\n        }\r\n        this.shadow.load(data.shadow);\r\n        this.triangles.load(data.triangles);\r\n        if (data.width !== undefined) {\r\n            this.width = data.width;\r\n        }\r\n        if (data.warp !== undefined) {\r\n            this.warp = data.warp;\r\n        }\r\n    }\r\n}\r\n", "import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"tsparticles-engine\";\r\nimport { CircleWarp } from \"./CircleWarp\";\r\nimport { Links } from \"./Options/Classes/Links\";\r\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\r\n    const { dx, dy, distance } = getDistances(pos1, pos2);\r\n    if (!warp || distance <= optDistance) {\r\n        return distance;\r\n    }\r\n    const absDiffs = {\r\n        x: Math.abs(dx),\r\n        y: Math.abs(dy),\r\n    }, warpDistances = {\r\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\r\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\r\n    };\r\n    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\r\n}\r\nexport class Linker extends ParticlesInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        this._setColor = (p1) => {\r\n            if (!p1.options.links) {\r\n                return;\r\n            }\r\n            const container = this.linkContainer, linksOptions = p1.options.links;\r\n            let linkColor = linksOptions.id === undefined\r\n                ? container.particles.linksColor\r\n                : container.particles.linksColors.get(linksOptions.id);\r\n            if (linkColor) {\r\n                return;\r\n            }\r\n            const optColor = linksOptions.color;\r\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\r\n            if (linksOptions.id === undefined) {\r\n                container.particles.linksColor = linkColor;\r\n            }\r\n            else {\r\n                container.particles.linksColors.set(linksOptions.id, linkColor);\r\n            }\r\n        };\r\n        this.linkContainer = container;\r\n    }\r\n    clear() {\r\n    }\r\n    init() {\r\n        this.linkContainer.particles.linksColor = undefined;\r\n        this.linkContainer.particles.linksColors = new Map();\r\n    }\r\n    async interact(p1) {\r\n        if (!p1.options.links) {\r\n            return;\r\n        }\r\n        p1.links = [];\r\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\r\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\r\n            return;\r\n        }\r\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp\r\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\r\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\r\n        for (const p2 of query) {\r\n            const linkOpt2 = p2.options.links;\r\n            if (p1 === p2 ||\r\n                !linkOpt2?.enable ||\r\n                linkOpt1.id !== linkOpt2.id ||\r\n                p2.spawning ||\r\n                p2.destroyed ||\r\n                !p2.links ||\r\n                p1.links.some((t) => t.destination === p2) ||\r\n                p2.links.some((t) => t.destination === p1)) {\r\n                continue;\r\n            }\r\n            const pos2 = p2.getPosition();\r\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\r\n                continue;\r\n            }\r\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\r\n            if (distance > optDistance) {\r\n                continue;\r\n            }\r\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\r\n            this._setColor(p1);\r\n            p1.links.push({\r\n                destination: p2,\r\n                opacity: opacityLine,\r\n            });\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        return !!particle.options.links?.enable;\r\n    }\r\n    loadParticlesOptions(options, ...sources) {\r\n        if (!options.links) {\r\n            options.links = new Links();\r\n        }\r\n        for (const source of sources) {\r\n            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\r\n        }\r\n    }\r\n    reset() {\r\n    }\r\n}\r\n", "import { Linker } from \"./Linker\";\r\nexport async function loadLinksInteraction(engine, refresh = true) {\r\n    await engine.addInteractor(\"particlesLinks\", (container) => new Linker(container), refresh);\r\n}\r\n", "import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\r\nexport function drawLinkLine(params) {\r\n    let drawn = false;\r\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\r\n    if (getDistance(begin, end) <= maxDistance) {\r\n        drawLine(context, begin, end);\r\n        drawn = true;\r\n    }\r\n    else if (links.warp) {\r\n        let pi1;\r\n        let pi2;\r\n        const endNE = {\r\n            x: end.x - canvasSize.width,\r\n            y: end.y,\r\n        };\r\n        const d1 = getDistances(begin, endNE);\r\n        if (d1.distance <= maxDistance) {\r\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\r\n            pi1 = { x: 0, y: yi };\r\n            pi2 = { x: canvasSize.width, y: yi };\r\n        }\r\n        else {\r\n            const endSW = {\r\n                x: end.x,\r\n                y: end.y - canvasSize.height,\r\n            };\r\n            const d2 = getDistances(begin, endSW);\r\n            if (d2.distance <= maxDistance) {\r\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\r\n                const xi = -yi / (d2.dy / d2.dx);\r\n                pi1 = { x: xi, y: 0 };\r\n                pi2 = { x: xi, y: canvasSize.height };\r\n            }\r\n            else {\r\n                const endSE = {\r\n                    x: end.x - canvasSize.width,\r\n                    y: end.y - canvasSize.height,\r\n                };\r\n                const d3 = getDistances(begin, endSE);\r\n                if (d3.distance <= maxDistance) {\r\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\r\n                    const xi = -yi / (d3.dy / d3.dx);\r\n                    pi1 = { x: xi, y: yi };\r\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\r\n                }\r\n            }\r\n        }\r\n        if (pi1 && pi2) {\r\n            drawLine(context, begin, pi1);\r\n            drawLine(context, end, pi2);\r\n            drawn = true;\r\n        }\r\n    }\r\n    if (!drawn) {\r\n        return;\r\n    }\r\n    context.lineWidth = width;\r\n    if (backgroundMask.enable) {\r\n        context.globalCompositeOperation = backgroundMask.composite;\r\n    }\r\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\r\n    const { shadow } = links;\r\n    if (shadow.enable) {\r\n        const shadowColor = rangeColorToRgb(shadow.color);\r\n        if (shadowColor) {\r\n            context.shadowBlur = shadow.blur;\r\n            context.shadowColor = getStyleFromRgb(shadowColor);\r\n        }\r\n    }\r\n    context.stroke();\r\n}\r\nexport function drawLinkTriangle(params) {\r\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\r\n    drawTriangle(context, pos1, pos2, pos3);\r\n    if (backgroundMask.enable) {\r\n        context.globalCompositeOperation = backgroundMask.composite;\r\n    }\r\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\r\n    context.fill();\r\n}\r\nexport function getLinkKey(ids) {\r\n    ids.sort((a, b) => a - b);\r\n    return ids.join(\"_\");\r\n}\r\nexport function setLinkFrequency(particles, dictionary) {\r\n    const key = getLinkKey(particles.map((t) => t.id));\r\n    let res = dictionary.get(key);\r\n    if (res === undefined) {\r\n        res = getRandom();\r\n        dictionary.set(key, res);\r\n    }\r\n    return res;\r\n}\r\n", "import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\r\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\r\nexport class LinkInstance {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this._drawLinkLine = (p1, link) => {\r\n            const p1LinksOptions = p1.options.links;\r\n            if (!p1LinksOptions?.enable) {\r\n                return;\r\n            }\r\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\r\n            let opacity = link.opacity;\r\n            container.canvas.draw((ctx) => {\r\n                let colorLine;\r\n                const twinkle = p1.options.twinkle?.lines;\r\n                if (twinkle?.enable) {\r\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\r\n                    if (twinkling && twinkleRgb) {\r\n                        colorLine = twinkleRgb;\r\n                        opacity = getRangeValue(twinkle.opacity);\r\n                    }\r\n                }\r\n                if (!colorLine) {\r\n                    const linkColor = p1LinksOptions.id !== undefined\r\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\r\n                        : container.particles.linksColor;\r\n                    colorLine = getLinkColor(p1, p2, linkColor);\r\n                }\r\n                if (!colorLine) {\r\n                    return;\r\n                }\r\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\r\n                drawLinkLine({\r\n                    context: ctx,\r\n                    width,\r\n                    begin: pos1,\r\n                    end: pos2,\r\n                    maxDistance,\r\n                    canvasSize: container.canvas.size,\r\n                    links: p1LinksOptions,\r\n                    backgroundMask: backgroundMask,\r\n                    colorLine,\r\n                    opacity,\r\n                });\r\n            });\r\n        };\r\n        this._drawLinkTriangle = (p1, link1, link2) => {\r\n            const linksOptions = p1.options.links;\r\n            if (!linksOptions?.enable) {\r\n                return;\r\n            }\r\n            const triangleOptions = linksOptions.triangles;\r\n            if (!triangleOptions.enable) {\r\n                return;\r\n            }\r\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\r\n            if (opacityTriangle <= 0) {\r\n                return;\r\n            }\r\n            container.canvas.draw((ctx) => {\r\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\r\n                if (getDistance(pos1, pos2) > linksDistance ||\r\n                    getDistance(pos3, pos2) > linksDistance ||\r\n                    getDistance(pos3, pos1) > linksDistance) {\r\n                    return;\r\n                }\r\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\r\n                if (!colorTriangle) {\r\n                    const linkColor = linksOptions.id !== undefined\r\n                        ? container.particles.linksColors.get(linksOptions.id)\r\n                        : container.particles.linksColor;\r\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\r\n                }\r\n                if (!colorTriangle) {\r\n                    return;\r\n                }\r\n                drawLinkTriangle({\r\n                    context: ctx,\r\n                    pos1,\r\n                    pos2,\r\n                    pos3,\r\n                    backgroundMask: options.backgroundMask,\r\n                    colorTriangle,\r\n                    opacityTriangle,\r\n                });\r\n            });\r\n        };\r\n        this._drawTriangles = (options, p1, link, p1Links) => {\r\n            const p2 = link.destination;\r\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\r\n                return;\r\n            }\r\n            const vertices = p2.links?.filter((t) => {\r\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\r\n                return (p2.options.links &&\r\n                    linkFreq <= p2.options.links.frequency &&\r\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\r\n            });\r\n            if (!vertices?.length) {\r\n                return;\r\n            }\r\n            for (const vertex of vertices) {\r\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\r\n                if (triangleFreq > options.links.triangles.frequency) {\r\n                    continue;\r\n                }\r\n                this._drawLinkTriangle(p1, link, vertex);\r\n            }\r\n        };\r\n        this._getLinkFrequency = (p1, p2) => {\r\n            return setLinkFrequency([p1, p2], this._freqs.links);\r\n        };\r\n        this._getTriangleFrequency = (p1, p2, p3) => {\r\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\r\n        };\r\n        this._freqs = {\r\n            links: new Map(),\r\n            triangles: new Map(),\r\n        };\r\n    }\r\n    drawParticle(context, particle) {\r\n        const { links, options } = particle;\r\n        if (!links || links.length <= 0) {\r\n            return;\r\n        }\r\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\r\n        for (const link of p1Links) {\r\n            this._drawTriangles(options, particle, link, p1Links);\r\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\r\n                this._drawLinkLine(particle, link);\r\n            }\r\n        }\r\n    }\r\n    async init() {\r\n        this._freqs.links = new Map();\r\n        this._freqs.triangles = new Map();\r\n    }\r\n    particleCreated(particle) {\r\n        particle.links = [];\r\n        if (!particle.options.links) {\r\n            return;\r\n        }\r\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\r\n        retina.linksDistance = distance * ratio;\r\n        retina.linksWidth = width * ratio;\r\n    }\r\n    particleDestroyed(particle) {\r\n        particle.links = [];\r\n    }\r\n}\r\n", "import { LinkInstance } from \"./LinkInstance\";\r\nclass LinksPlugin {\r\n    constructor() {\r\n        this.id = \"links\";\r\n    }\r\n    getPlugin(container) {\r\n        return new LinkInstance(container);\r\n    }\r\n    loadOptions() {\r\n    }\r\n    needsPlugin() {\r\n        return true;\r\n    }\r\n}\r\nexport async function loadLinksPlugin(engine, refresh = true) {\r\n    const plugin = new LinksPlugin();\r\n    await engine.addPlugin(plugin, refresh);\r\n}\r\n", "import { loadLinksInteraction } from \"./interaction\";\r\nimport { loadLinksPlugin } from \"./plugin\";\r\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\r\n    await loadLinksInteraction(engine, refresh);\r\n    await loadLinksPlugin(engine, refresh);\r\n}\r\nexport * from \"./Options/Classes/Links\";\r\nexport * from \"./Options/Classes/LinksShadow\";\r\nexport * from \"./Options/Classes/LinksTriangle\";\r\nexport * from \"./Options/Interfaces/ILinks\";\r\nexport * from \"./Options/Interfaces/ILinksShadow\";\r\nexport * from \"./Options/Interfaces/ILinksTriangle\";\r\n", "import { getRangeValue } from \"tsparticles-engine\";\r\nexport class PolygonDrawerBase {\r\n    draw(context, particle, radius) {\r\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\r\n        if (!context) {\r\n            return;\r\n        }\r\n        context.beginPath();\r\n        context.translate(start.x, start.y);\r\n        context.moveTo(0, 0);\r\n        for (let i = 0; i < sideCount; i++) {\r\n            context.lineTo(side.length, 0);\r\n            context.translate(side.length, 0);\r\n            context.rotate(interiorAngle);\r\n        }\r\n    }\r\n    getSidesCount(particle) {\r\n        const polygon = particle.shapeData;\r\n        return Math.round(getRangeValue(polygon?.sides ?? polygon?.nb_sides ?? 5));\r\n    }\r\n}\r\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\r\nexport class PolygonDrawer extends PolygonDrawerBase {\r\n    getCenter(particle, radius) {\r\n        return {\r\n            x: -radius / (particle.sides / 3.5),\r\n            y: -radius / (2.66 / 3.5),\r\n        };\r\n    }\r\n    getSidesData(particle, radius) {\r\n        const sides = particle.sides;\r\n        return {\r\n            count: {\r\n                denominator: 1,\r\n                numerator: sides,\r\n            },\r\n            length: (radius * 2.66) / (sides / 3),\r\n        };\r\n    }\r\n}\r\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\r\nexport class TriangleDrawer extends PolygonDrawerBase {\r\n    getCenter(particle, radius) {\r\n        return {\r\n            x: -radius,\r\n            y: radius / 1.66,\r\n        };\r\n    }\r\n    getSidesCount() {\r\n        return 3;\r\n    }\r\n    getSidesData(particle, radius) {\r\n        return {\r\n            count: {\r\n                denominator: 2,\r\n                numerator: 3,\r\n            },\r\n            length: radius * 2,\r\n        };\r\n    }\r\n}\r\n", "import { PolygonDrawer } from \"./PolygonDrawer\";\r\nimport { TriangleDrawer } from \"./TriangleDrawer\";\r\nexport async function loadGenericPolygonShape(engine, refresh = true) {\r\n    await engine.addShape(\"polygon\", new PolygonDrawer(), refresh);\r\n}\r\nexport async function loadTriangleShape(engine, refresh = true) {\r\n    await engine.addShape(\"triangle\", new TriangleDrawer(), refresh);\r\n}\r\nexport async function loadPolygonShape(engine, refresh = true) {\r\n    await loadGenericPolygonShape(engine, refresh);\r\n    await loadTriangleShape(engine, refresh);\r\n}\r\n", "import { setRangeValue } from \"tsparticles-engine\";\r\nexport class RotateAnimation {\r\n    constructor() {\r\n        this.enable = false;\r\n        this.speed = 0;\r\n        this.decay = 0;\r\n        this.sync = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.enable !== undefined) {\r\n            this.enable = data.enable;\r\n        }\r\n        if (data.speed !== undefined) {\r\n            this.speed = setRangeValue(data.speed);\r\n        }\r\n        if (data.decay !== undefined) {\r\n            this.decay = setRangeValue(data.decay);\r\n        }\r\n        if (data.sync !== undefined) {\r\n            this.sync = data.sync;\r\n        }\r\n    }\r\n}\r\n", "import { ValueWithRandom, } from \"tsparticles-engine\";\r\nimport { RotateAnimation } from \"./RotateAnimation\";\r\nexport class Rotate extends ValueWithRandom {\r\n    constructor() {\r\n        super();\r\n        this.animation = new RotateAnimation();\r\n        this.direction = \"clockwise\";\r\n        this.path = false;\r\n        this.value = 0;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        super.load(data);\r\n        if (data.direction !== undefined) {\r\n            this.direction = data.direction;\r\n        }\r\n        this.animation.load(data.animation);\r\n        if (data.path !== undefined) {\r\n            this.path = data.path;\r\n        }\r\n    }\r\n}\r\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\r\nimport { Rotate } from \"./Options/Classes/Rotate\";\r\nfunction updateRotate(particle, delta) {\r\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\r\n    if (!rotate || !rotateOptions) {\r\n        return;\r\n    }\r\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\r\n    if (!rotateAnimation.enable) {\r\n        return;\r\n    }\r\n    switch (rotate.status) {\r\n        case \"increasing\":\r\n            rotate.value += speed;\r\n            if (rotate.value > max) {\r\n                rotate.value -= max;\r\n            }\r\n            break;\r\n        case \"decreasing\":\r\n        default:\r\n            rotate.value -= speed;\r\n            if (rotate.value < 0) {\r\n                rotate.value += max;\r\n            }\r\n            break;\r\n    }\r\n    if (rotate.velocity && decay !== 1) {\r\n        rotate.velocity *= decay;\r\n    }\r\n}\r\nexport class RotateUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const rotateOptions = particle.options.rotate;\r\n        if (!rotateOptions) {\r\n            return;\r\n        }\r\n        particle.rotate = {\r\n            enable: rotateOptions.animation.enable,\r\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\r\n        };\r\n        particle.pathRotation = rotateOptions.path;\r\n        let rotateDirection = rotateOptions.direction;\r\n        if (rotateDirection === \"random\") {\r\n            const index = Math.floor(getRandom() * 2);\r\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\r\n        }\r\n        switch (rotateDirection) {\r\n            case \"counter-clockwise\":\r\n            case \"counterClockwise\":\r\n                particle.rotate.status = \"decreasing\";\r\n                break;\r\n            case \"clockwise\":\r\n                particle.rotate.status = \"increasing\";\r\n                break;\r\n        }\r\n        const rotateAnimation = rotateOptions.animation;\r\n        if (rotateAnimation.enable) {\r\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\r\n            particle.rotate.velocity =\r\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\r\n            if (!rotateAnimation.sync) {\r\n                particle.rotate.velocity *= getRandom();\r\n            }\r\n        }\r\n        particle.rotation = particle.rotate.value;\r\n    }\r\n    isEnabled(particle) {\r\n        const rotate = particle.options.rotate;\r\n        if (!rotate) {\r\n            return false;\r\n        }\r\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\r\n    }\r\n    loadOptions(options, ...sources) {\r\n        if (!options.rotate) {\r\n            options.rotate = new Rotate();\r\n        }\r\n        for (const source of sources) {\r\n            options.rotate.load(source?.rotate);\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateRotate(particle, delta);\r\n        particle.rotation = particle.rotate?.value ?? 0;\r\n    }\r\n}\r\n", "import { RotateUpdater } from \"./RotateUpdater\";\r\nexport async function loadRotateUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container), refresh);\r\n}\r\n", "const fixFactor = Math.sqrt(2);\r\nexport class SquareDrawer {\r\n    draw(context, particle, radius) {\r\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\r\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\r\n    }\r\n    getSidesCount() {\r\n        return 4;\r\n    }\r\n}\r\n", "import { SquareDrawer } from \"./SquareDrawer\";\r\nexport async function loadSquareShape(engine, refresh = true) {\r\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\r\n}\r\n", "import { getRangeValue } from \"tsparticles-engine\";\r\nexport class StarDrawer {\r\n    draw(context, particle, radius) {\r\n        const sides = particle.sides, inset = particle.starInset ?? 2;\r\n        context.moveTo(0, 0 - radius);\r\n        for (let i = 0; i < sides; i++) {\r\n            context.rotate(Math.PI / sides);\r\n            context.lineTo(0, 0 - radius * inset);\r\n            context.rotate(Math.PI / sides);\r\n            context.lineTo(0, 0 - radius);\r\n        }\r\n    }\r\n    getSidesCount(particle) {\r\n        const star = particle.shapeData;\r\n        return Math.round(getRangeValue(star?.sides ?? star?.nb_sides ?? 5));\r\n    }\r\n    particleInit(container, particle) {\r\n        const star = particle.shapeData, inset = getRangeValue(star?.inset ?? 2);\r\n        particle.starInset = inset;\r\n    }\r\n}\r\n", "import { StarDrawer } from \"./StarDrawer\";\r\nexport async function loadStarShape(engine, refresh = true) {\r\n    await engine.addShape(\"star\", new StarDrawer(), refresh);\r\n}\r\n", "import { randomInRange, } from \"tsparticles-engine\";\r\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\r\n    if (!colorValue ||\r\n        !valueAnimation.enable ||\r\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\r\n        return;\r\n    }\r\n    if (!colorValue.time) {\r\n        colorValue.time = 0;\r\n    }\r\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\r\n        colorValue.time += delta.value;\r\n    }\r\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\r\n        return;\r\n    }\r\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\r\n    if (!decrease || colorValue.status === \"increasing\") {\r\n        colorValue.value += velocity;\r\n        if (colorValue.value > max) {\r\n            if (!colorValue.loops) {\r\n                colorValue.loops = 0;\r\n            }\r\n            colorValue.loops++;\r\n            if (decrease) {\r\n                colorValue.status = \"decreasing\";\r\n                colorValue.value -= colorValue.value % max;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        colorValue.value -= velocity;\r\n        if (colorValue.value < 0) {\r\n            if (!colorValue.loops) {\r\n                colorValue.loops = 0;\r\n            }\r\n            colorValue.loops++;\r\n            colorValue.status = \"increasing\";\r\n            colorValue.value += colorValue.value;\r\n        }\r\n    }\r\n    if (colorValue.velocity && decay !== 1) {\r\n        colorValue.velocity *= decay;\r\n    }\r\n    if (colorValue.value > max) {\r\n        colorValue.value %= max;\r\n    }\r\n}\r\nexport function updateStrokeColor(particle, delta) {\r\n    if (!particle.strokeColor || !particle.strokeAnimation) {\r\n        return;\r\n    }\r\n    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;\r\n    if (h) {\r\n        updateColorValue(delta, h, hAnimation, 360, false);\r\n    }\r\n    if (s) {\r\n        updateColorValue(delta, s, sAnimation, 100, true);\r\n    }\r\n    if (l) {\r\n        updateColorValue(delta, l, lAnimation, 100, true);\r\n    }\r\n}\r\n", "import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, } from \"tsparticles-engine\";\r\nimport { updateStrokeColor } from \"./Utils\";\r\nexport class StrokeColorUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const container = this.container, options = particle.options;\r\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\r\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\r\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\r\n        particle.strokeAnimation = stroke.color?.animation;\r\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\r\n        if (strokeHslColor) {\r\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const color = particle.strokeAnimation, { strokeColor } = particle;\r\n        return (!particle.destroyed &&\r\n            !particle.spawning &&\r\n            !!color &&\r\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\r\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\r\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateStrokeColor(particle, delta);\r\n    }\r\n}\r\n", "import { StrokeColorUpdater } from \"./StrokeColorUpdater\";\r\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\r\n    await engine.addParticleUpdater(\"strokeColor\", (container) => new StrokeColorUpdater(container), refresh);\r\n}\r\n", "import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\r\nexport const validTypes = [\"text\", \"character\", \"char\"];\r\nexport class TextDrawer {\r\n    draw(context, particle, radius, opacity) {\r\n        const character = particle.shapeData;\r\n        if (character === undefined) {\r\n            return;\r\n        }\r\n        const textData = character.value;\r\n        if (textData === undefined) {\r\n            return;\r\n        }\r\n        if (particle.text === undefined) {\r\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\r\n        }\r\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\r\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\r\n        const pos = {\r\n            x: -offsetX,\r\n            y: radius / 2,\r\n        };\r\n        context.globalAlpha = opacity;\r\n        if (fill) {\r\n            context.fillText(text, pos.x, pos.y);\r\n        }\r\n        else {\r\n            context.strokeText(text, pos.x, pos.y);\r\n        }\r\n        context.globalAlpha = 1;\r\n    }\r\n    getSidesCount() {\r\n        return 12;\r\n    }\r\n    async init(container) {\r\n        const options = container.actualOptions;\r\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\r\n            const shapeOptions = validTypes\r\n                .map((t) => options.particles.shape.options[t])\r\n                .find((t) => !!t), promises = [];\r\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\r\n                promises.push(loadFont(shape.font, shape.weight));\r\n            });\r\n            await Promise.all(promises);\r\n        }\r\n    }\r\n    particleInit(container, particle) {\r\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\r\n            return;\r\n        }\r\n        const character = particle.shapeData;\r\n        if (character === undefined) {\r\n            return;\r\n        }\r\n        const textData = character.value;\r\n        if (textData === undefined) {\r\n            return;\r\n        }\r\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\r\n    }\r\n}\r\n", "import { TextDrawer, validTypes } from \"./TextDrawer\";\r\nexport async function loadTextShape(engine, refresh = true) {\r\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\r\n}\r\n", "import { initPjs } from \"tsparticles-particles.js\";\r\nimport { loadBasic } from \"tsparticles-basic\";\r\nimport { loadEasingQuadPlugin } from \"tsparticles-plugin-easing-quad\";\r\nimport { loadExternalAttractInteraction } from \"tsparticles-interaction-external-attract\";\r\nimport { loadExternalBounceInteraction } from \"tsparticles-interaction-external-bounce\";\r\nimport { loadExternalBubbleInteraction } from \"tsparticles-interaction-external-bubble\";\r\nimport { loadExternalConnectInteraction } from \"tsparticles-interaction-external-connect\";\r\nimport { loadExternalGrabInteraction } from \"tsparticles-interaction-external-grab\";\r\nimport { loadExternalPauseInteraction } from \"tsparticles-interaction-external-pause\";\r\nimport { loadExternalPushInteraction } from \"tsparticles-interaction-external-push\";\r\nimport { loadExternalRemoveInteraction } from \"tsparticles-interaction-external-remove\";\r\nimport { loadExternalRepulseInteraction } from \"tsparticles-interaction-external-repulse\";\r\nimport { loadExternalSlowInteraction } from \"tsparticles-interaction-external-slow\";\r\nimport { loadImageShape } from \"tsparticles-shape-image\";\r\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\r\nimport { loadLineShape } from \"tsparticles-shape-line\";\r\nimport { loadParallaxMover } from \"tsparticles-move-parallax\";\r\nimport { loadParticlesAttractInteraction } from \"tsparticles-interaction-particles-attract\";\r\nimport { loadParticlesCollisionsInteraction } from \"tsparticles-interaction-particles-collisions\";\r\nimport { loadParticlesLinksInteraction } from \"tsparticles-interaction-particles-links\";\r\nimport { loadPolygonShape } from \"tsparticles-shape-polygon\";\r\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\r\nimport { loadSquareShape } from \"tsparticles-shape-square\";\r\nimport { loadStarShape } from \"tsparticles-shape-star\";\r\nimport { loadStrokeColorUpdater } from \"tsparticles-updater-stroke-color\";\r\nimport { loadTextShape } from \"tsparticles-shape-text\";\r\nexport async function loadSlim(engine, refresh = true) {\r\n    initPjs(engine);\r\n    await loadParallaxMover(engine, false);\r\n    await loadExternalAttractInteraction(engine, false);\r\n    await loadExternalBounceInteraction(engine, false);\r\n    await loadExternalBubbleInteraction(engine, false);\r\n    await loadExternalConnectInteraction(engine, false);\r\n    await loadExternalGrabInteraction(engine, false);\r\n    await loadExternalPauseInteraction(engine, false);\r\n    await loadExternalPushInteraction(engine, false);\r\n    await loadExternalRemoveInteraction(engine, false);\r\n    await loadExternalRepulseInteraction(engine, false);\r\n    await loadExternalSlowInteraction(engine, false);\r\n    await loadParticlesAttractInteraction(engine, false);\r\n    await loadParticlesCollisionsInteraction(engine, false);\r\n    await loadParticlesLinksInteraction(engine, false);\r\n    await loadEasingQuadPlugin();\r\n    await loadImageShape(engine, false);\r\n    await loadLineShape(engine, false);\r\n    await loadPolygonShape(engine, false);\r\n    await loadSquareShape(engine, false);\r\n    await loadStarShape(engine, false);\r\n    await loadTextShape(engine, false);\r\n    await loadLifeUpdater(engine, false);\r\n    await loadRotateUpdater(engine, false);\r\n    await loadStrokeColorUpdater(engine, false);\r\n    await loadBasic(engine, refresh);\r\n}\r\n"],
  "mappings": "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",
  "names": ["checkDestroy", "container", "container", "bounce", "container", "lineStyle", "container", "container", "container", "container", "Attractor", "Attractor", "container", "container", "updateColorValue"]
}
